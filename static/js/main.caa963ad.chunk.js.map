{"version":3,"sources":["components/Logo.js","components/Navbar.js","screens/HomeScreen.js","screens/AboutUsScreen.js","components/AlertMessage.js","webaction/SolidityFunctionModules.js","screens/RegisterScreen.js","screens/LoginScreen.js","components/NavbarVertical.js","screens/DashboardScreen.js","screens/InformationScreen.js","components/RequiredFieldStar.js","components/ElectionInitializeMsg.js","components/YourAccount.js","screens/VoterVerificationScreen.js","screens/admin/ElectionSetupScreen.js","screens/admin/VerificationScreen.js","screens/admin/CandidateVerificationScreen.js","screens/VotingScreen.js","components/Analysis.js","screens/ResultScreen.js","components/Footer.js","screens/AdminLoginScreen.js","App.js","serviceWorker.js","index.js"],"names":["Logo","src","className","alt","height","width","Navbar","splitLocation","useLocation","pathname","split","to","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","style","fontSize","length","HomeScreen","minHeight","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","fontFamily","color","textalign","position","top","left","transform","border","borderRadius","opacity","AboutUsScreen","AlertMessage","props","role","message","data-bs-dismiss","display","onClick","setTimeout","window","location","reload","sol_connectwallet","async","web3","error","acc","ethereum","console","log","request","method","Web3","err","sol_getElectionInstance","sol_getWeb3","networkId","eth","net","getId","deployedNetwork","Election","networks","Contract","abi","address","data","sol_getCurrentAccount","sol_isAdminAddress","ElectionInstance","methods","getAdmin","call","toString","toLowerCase","sol_getElectionDetails","getElectionDetails","sol_isPendingRequest","isPendingRequest","sol_verifyLoginDetails","email","password","loginData","getVoterDetails","storedEmail","storedPassowrd","storedAccount","voterAddress","sol_getUserDetails","sol_isVoterExists","isVoterExists","sol_denyVerificationRequests","denyVerificationRequests","denyAccount","send","from","gas","gasPrice","sol_getAllVoterDetails","getAllVoterDetails","RegisterScreen","loginlinkstyle","textDecoration","useState","username","setUsername","setEmail","setPassword","isAccountConnected","setIsAccountConnected","currentAcc","setCurrentAcc","errorConnectWallet","setErrorConnectWallet","errorRegister","setErrorRegister","navigate","useNavigate","useEffect","justifyContent","alignItems","backgroundColor","flexDirection","margin","background","padding","href","target","onSubmit","e","preventDefault","_gasPrice","getGasPrice","addVoterDetails","Error","sol_addLoginDetails","minWidth","marginLeft","htmlFor","placeholder","value","onChange","required","pattern","disabled","LoginScreen","errorLogin","setErrorLogin","float","NavbarVertical","isAdminConnected","setIsAdminConnected","currentElectionPhase","setCurrentElectionPhase","isAdmin","confirm","cursor","DashboardScreen","getUserDetails","marginBottom","component","InformationScreen","RequiredFieldStar","ElectionInitializeMsg","storedElectionTitle","setStoredElectionTitle","isElectionStarted","setIsElectionStarted","organizationName","setOrganizationName","YourAccount","currentAccount","setCurrentAccount","getCurrentAccount","VoterVerificationScreen","divisionstyle","ystyle","prn","setPrn","mobile","setMobile","isVerified","setIsVerified","isDenied","setIsDenied","isCandidate","setIsCandidate","tagLine","setTagLine","hasApplied","setHasApplied","applyForVerification","addVerificationRequest","sol_addVerificationRequest","applyForCandidate","addCandidateRequest","sol_addCandidateRequest","routeValidation","maxLength","marginleft","backgroundcolor","ElectionSetupScreen","aboutelectionstyle","errorPendingRequests","setErrorPendingRequests","electionTitle","setElectionTitle","classes","setClasses","degree","setDegree","stream","setStream","nextElectionPhase","setNextElectionPhase","startElection","sol_startElection","resetElection","sol_resetElection","changeElectionPhase","sol_changeElectionPhase","hidden","VerificationScreen","voterData","setVoterData","isApproved","setIsApproved","atLeastOneVerified","setAtLeastOneVerified","atLeastOnePending","setAtLeastOnePending","buttonStyle","marginRight","onClickApprove","approveVerificationRequests","approveAccount","sol_approveVerificationRequests","allVoterDetails","i","temp","push","colSpan","map","student","key","onClickDeny","data-dismiss","CandidateVerificationScreen","candidateData","setCandidateData","atLeastOneCandidate","setAtLeastOneCandidate","approveCandidateRequests","sol_approveCandidateRequests","allCandidateDetails","VotingScreen","setAccount","hasVoted","setHasVoted","hasCastedVote","sol_hasVoted","onClickVote","addVote","candidateAddress","sol_addVote","accounts","getAccount","candidate","Analysis","P1_candidateName","P1_candidateVotesCount","P2_totalCount","setP2_TotalCount","P2_verifiedCount","setP2_VerifiedCount","setP2_CandidateCount","P2_votedCount","setP2_VotedCount","P2_notVotedVerifiedCount","setP2_NotVotedVerifiedCount","P2_notVotedNotVerifiedCount","setP2_NotVotedNotVerifiedCount","P2_candidateCount","P1_data","values","labels","textinfo","P2_data","parents","outsidetextfont","size","leaf","marker","line","branchvalues","layout","title","l","r","b","t","ResultScreen","winnerCandidate","setWinnerCandidate","maxVotes","winner","winnerName","votesCount","Footer","bottom","AdminLoginScreen","App","exact","path","element","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.caa963ad.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <img\r\n      src=\"./Images/logo.png\"\r\n      className=\"img-fluid\"\r\n      alt=\"logo\"\r\n      height=\"40\"\r\n      width=\"140\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport Logo from \"./Logo.js\";\r\n\r\nconst Navbar = () => {\r\n  const location = useLocation();\r\n\r\n  //destructuring pathname from location\r\n  const { pathname } = location;\r\n  const splitLocation = pathname.split(\"/\");\r\n  const headerstyle = {\r\n    fontSize: \"1.3rem\",\r\n  };\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            <Logo />\r\n          </Link>\r\n\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"nav navbar-nav\">\r\n            <div\r\n              className=\"collapse navbar-collapse\"\r\n              id=\"navbarSupportedContent\"\r\n            >\r\n              <ul\r\n                className=\"navbar-nav me-auto mb-2 mb-lg-0\"\r\n                style={headerstyle}\r\n              >\r\n                <li className=\"nav-item\">\r\n                  <Link\r\n                    to=\"/\"\r\n                    className={`nav-link ${\r\n                      splitLocation[splitLocation.length - 1] === \"\"\r\n                        ? \"active\"\r\n                        : \"\"\r\n                    }`}\r\n                  >\r\n                    Home\r\n                  </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <Link\r\n                    to=\"/register\"\r\n                    className={`nav-link ${\r\n                      splitLocation[splitLocation.length - 1] === \"register\"\r\n                        ? \"active\"\r\n                        : \"\"\r\n                    }`}\r\n                  >\r\n                    Register\r\n                  </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <Link\r\n                    to=\"/adminlogin\"\r\n                    className={`nav-link ${\r\n                      splitLocation[splitLocation.length - 1] === \"adminlogin\"\r\n                        ? \"active\"\r\n                        : \"\"\r\n                    }`}\r\n                  >\r\n                    Admin Login\r\n                  </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <Link\r\n                    to=\"/login\"\r\n                    className={`nav-link ${\r\n                      splitLocation[splitLocation.length - 1] === \"login\"\r\n                        ? \"active\"\r\n                        : \"\"\r\n                    }`}\r\n                  >\r\n                    Student Login\r\n                  </Link>\r\n                </li>\r\n                {/* <li className=\"nav-item\">\r\n                  <Link\r\n                    to=\"/aboutus\"\r\n                    className={`nav-link ${\r\n                      splitLocation[splitLocation.length - 1] === \"aboutus\"\r\n                        ? \"active\"\r\n                        : \"\"\r\n                    }`}\r\n                  >\r\n                    About Us\r\n                  </Link>\r\n                </li> */}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport Navbar from \"../components/Navbar.js\";\r\nimport { Link } from \"react-router-dom\";\r\nconst HomeScreen = () => {\r\n  //------------------------------ Style CSS -----------------------------------------//\r\n  const homescreenstyle = {\r\n    minHeight: \"100%\",\r\n    backgroundImage: `url(\"./Images/BriefGrandioseKillifish.gif\")`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundPosition: \"center center\",\r\n    backgroundSize: \"cover\",\r\n    width: \"100vw\",\r\n    height: \"84vh\",\r\n  };\r\n  const headerstyle = {\r\n    fontFamily: \"Monserrat , sansserif\",\r\n    fontSize: \"40px\",\r\n    color: \"white\",\r\n    textalign: \"center\",\r\n    position: \"absolute\",\r\n    top: \"40%\",\r\n    left: \"40%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n  };\r\n  const buttonstyle = {\r\n    fontFamily: \"Monserrat , sansserif\",\r\n    border: \"none\",\r\n    fontSize: \"1.5rem\",\r\n    borderRadius: \"10px\",\r\n    \r\n    opacity: \"0.\",\r\n  };\r\n\r\n  //------------------------------ Render Content -----------------------------------------//\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"HomePageWallpaper\" style={homescreenstyle}>\r\n        <div className=\"content\" style={headerstyle}>\r\n          <h1>BLOCKCHAIN IN VOTING</h1>\r\n          <h3>THE DIGITAL VOTING SYSTEM</h3>\r\n          <Link to=\"/register\">\r\n            <button className=\"btn btn-light btn-lg\" style={buttonstyle}>\r\n              Register Now\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomeScreen;\r\n","import React from \"react\";\r\nimport Navbar from \"../components/Navbar.js\";\r\n\r\nconst AboutUsScreen = () => {\r\n  const contributorsData = [\r\n    {\r\n      _id: 1,\r\n      name: \"Lakshmi Pragna Kollu\",\r\n      Branch: \"Computer Science and Engineering\",\r\n    },\r\n    {\r\n      _id: 2,\r\n      name: \"BIJO MURMU\",\r\n      Branch: \"Computer Science and Engineering\",\r\n    },\r\n    {\r\n      _id: 3,\r\n      name: \"Pracheta Manoj Bagde\",\r\n      Branch: \"Computer Science and Engineering\",\r\n    },\r\n  ];\r\n\r\n  const notextsytle = {\r\n    textDecoration: \"none\",\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"container m-2 p-4 ml-5\">\r\n        <div>\r\n          <h3>About Project</h3>\r\n          <p>\r\n            We students of{\" \"}\r\n            <strong> NIT Manipur  </strong>, \r\n            <a\r\n              href=\"https://bluepineapple.io/\"\r\n              target=\"_blank\"\r\n              style={notextsytle}\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Bluepineapple\r\n            </a>{\" \"}\r\n            were given an opportunity to discover real world problems, convert\r\n            it into a business product and find its solution.\r\n          </p>\r\n          <p>\r\n            While exploring, we conducted a survey and got to know that there\r\n            were no online Voting System present in schools and colleges. Many\r\n            organizations still use paper based voting in the era of\r\n            digitalization. With the advent of modern technology, the automated\r\n            voting processes using <strong> Blockchain Technology </strong>would\r\n            be a straightforward secured application that would improve\r\n            efficiency and would avoid problems that plagued the election.\r\n          </p>\r\n          <p>\r\n            <strong>Benefits of Voting System Using Blockchain:</strong>\r\n            <ul>\r\n              <li>More Secured System</li>\r\n              <li>Easy to comprehend</li>\r\n              <li>Flexible to use</li>\r\n              <li>Accurate and reliable results</li>\r\n              <li>Less human errors</li>\r\n              <li>Happy Students</li>\r\n            </ul>\r\n          </p>\r\n        </div>\r\n        <hr />\r\n        <h3>Contributors</h3>\r\n        <div className=\"row justify-content-evenly mb-5\">\r\n          {contributorsData.map((contributor) => (\r\n            <div\r\n              key={contributor._id}\r\n              className=\"col-auto col-sm-10 col-md-6 col-lg-3\"\r\n            >\r\n              <div className=\"card m-2 p-2\">\r\n                <div className=\"card-image\">\r\n                  <img\r\n                    src={contributor.image}\r\n                    className=\"fluid ml-auto\"\r\n                    alt=\"\" // ratio 4:3\r\n                    width=\"280\" // 3*8\r\n                    height=\"320\" // 4*8\r\n                  />\r\n                </div>\r\n                <div className=\"card-header\">\r\n                  <div className=\"card-title h5\">{contributor.name}</div>\r\n                  <div className=\"card-subtitle\">{contributor.stream}</div>\r\n                </div>\r\n                <a\r\n                  href={contributor.linkedin}\r\n                  target=\"_blank\"\r\n                  style={notextsytle}\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  <div className=\"card-body d-grid gap-2\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-info fw-bolder fs-5\"\r\n                    >\r\n                      LinkedIn\r\n                    </button>\r\n                  </div>\r\n                </a>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AboutUsScreen;\r\n","import React from \"react\";\r\n\r\nconst AlertMessage = (props) => {\r\n  return (\r\n    <div\r\n      className={`alert alert-${props.type} alert-dismissible fade show`}\r\n      role=\"alert\"\r\n    >\r\n      {props.message}\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn-close\"\r\n        data-bs-dismiss=\"alert\"\r\n        aria-label=\"Close\"\r\n        style={{ display: \"hidden\" }}\r\n        onClick={setTimeout(function () {\r\n          window.location.reload(false);\r\n        }, 3000)}\r\n      ></button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlertMessage;\r\n","// import Web3 from \"web3\";\r\n// import Election from \"../contracts/Election.json\";\r\n// const _gas = 1000000;\r\n// const _gasPrice = 5000000;\r\n\r\n// export const sol_connectwallet = async () => {\r\n//   let web3 = null,\r\n//     error = null,\r\n//     acc = null;\r\n//   if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\r\n//     try {\r\n//       acc = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n//       web3 = new Web3(window.ethereum);\r\n//       return { acc, web3, error };\r\n//     } catch (err) {\r\n//       error = err.message;\r\n//       return { acc, web3, error };\r\n//     }\r\n//   } else {\r\n//     console.log(\"Please install MetaMask\");\r\n//     error = \"Please install MetaMask!\";\r\n//     return { acc, web3, error };\r\n//   }\r\n// };\r\n// // export const sol_connectwallet = async () => {\r\n// //   let acc = null;\r\n// //   let error = null;\r\n// //   let web3 = null;\r\n\r\n// //   const isBrowser = typeof window !== \"undefined\";\r\n// //   const hasMetaMask = isBrowser && typeof window.ethereum !== \"undefined\";\r\n\r\n// //   if (hasMetaMask) {\r\n// //     try {\r\n// //       acc = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n// //       web3 = new Web3(window.ethereum);\r\n// //     } catch (err) {\r\n// //       error = err.message;\r\n// //     }\r\n// //   } else {\r\n// //     console.log(\"Please install MetaMask\");\r\n// //     error = \"Please install MetaMask!\";\r\n// //   }\r\n\r\n// //   return { acc, web3, error };\r\n// // };\r\n\r\n// export const sol_getElectionInstance = async () => {\r\n//   // let web3 = null;\r\n\r\n//   // const data = await sol_connectwallet();\r\n//   // web3 = data.web3;\r\n//   const web3 = await sol_getWeb3();\r\n//   // Get the contract instance.\r\n//   if (web3) {\r\n//     const networkId = await web3.eth.net.getId();\r\n//     const deployedNetwork = Election.networks[networkId];\r\n//     const ElectionInstance = new web3.eth.Contract(\r\n//       Election.abi,\r\n//       deployedNetwork && deployedNetwork.address\r\n//     );\r\n//     return ElectionInstance;\r\n//   }\r\n//   return false;\r\n// };\r\n\r\n// // // GPT Code by Bijo , p ,p\r\n// // export const sol_getElectionInstance = async () => {\r\n// //   const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\r\n// //   const networkId = await web3.eth.net.getId();\r\n// //   const deployedNetwork = Election.networks[networkId];\r\n\r\n// //   if (!deployedNetwork) {\r\n// //     throw new Error(\"Contract not deployed to detected network\");\r\n// //   }\r\n\r\n// //   return new web3.eth.Contract(Election.abi, deployedNetwork.address);\r\n// // };\r\n// // // Prag , prch\r\n\r\n// export const sol_getWeb3 = async () => {\r\n//   let web3 = null;\r\n\r\n//   const data = await sol_connectwallet();\r\n//   if (!data.error) {\r\n//     web3 = data.web3;\r\n//     return web3;\r\n//   }\r\n//   return false;\r\n// };\r\n\r\n// //Get current accout\r\n// export const sol_getCurrentAccount = async () => {\r\n//   const data = await sol_connectwallet();\r\n//   if (data.error) {\r\n//     return false;\r\n//   } else {\r\n//     return data.acc[0];\r\n//   }\r\n// };\r\n\r\n// export const sol_isAdminAddress = async () => {\r\n//   let acc = await sol_getCurrentAccount();\r\n//   if (acc) {\r\n//     const ElectionInstance = await sol_getElectionInstance();\r\n//     const admin = await ElectionInstance.methods.getAdmin().call();\r\n\r\n//     if (admin.toString().toLowerCase() === acc.toString().toLowerCase()) {\r\n//       return true;\r\n//     }\r\n//   }\r\n//   return false;\r\n// };\r\n\r\n// export const sol_getElectionDetails = async () => {\r\n//   const ElectionInstance = await sol_getElectionInstance();\r\n//   if (ElectionInstance) {\r\n//     let data = await ElectionInstance.methods.getElectionDetails().call();\r\n\r\n//     return data;\r\n//   }\r\n//   return false;\r\n// };\r\n\r\n// export const sol_startElection = async (electionTitle, organizationName) => {\r\n//   let acc = await sol_getCurrentAccount();\r\n//   const ElectionInstance = await sol_getElectionInstance();\r\n//   let data = sol_getElectionDetails();\r\n//   const isElectionStarted = data[0];\r\n//   if (acc) {\r\n//     if (!isElectionStarted) {\r\n//       await ElectionInstance.methods\r\n//         .startElection(electionTitle, organizationName)\r\n//         .send({ from: acc, gas: _gasPrice, gasPrice: _gasPrice });\r\n//       return true;\r\n//     }\r\n//   } else {\r\n//     return false;\r\n//   }\r\n// };\r\n\r\n// export const sol_isPendingRequest = async () => {\r\n//   const ElectionInstance = await sol_getElectionInstance();\r\n//   const isPendingRequest = await ElectionInstance.methods\r\n//     .isPendingRequest()\r\n//     .call();\r\n//   if (isPendingRequest) {\r\n//     return true;\r\n//   }\r\n//   return false;\r\n// };\r\n\r\n// export const sol_changeElectionPhase = async () => {\r\n//   const acc = await sol_getCurrentAccount();\r\n//   const ElectionInstance = await sol_getElectionInstance();\r\n\r\n//   let data = await ElectionInstance.methods.changeElectionPhase().send({\r\n//     from: acc,\r\n//     gas: _gasPrice,\r\n//     gasPrice: _gasPrice,\r\n//   });\r\n// };\r\n\r\n// //Add login details\r\n// export const sol_addLoginDetails = async (username, email, password) => {\r\n//   const acc = await sol_getCurrentAccount();\r\n//   if (acc) {\r\n//     const ElectionInstance = await sol_getElectionInstance();\r\n//     if (!(await ElectionInstance.methods.isVoterExists(acc, email).call())) {\r\n//       await ElectionInstance.methods\r\n//         .addVoterDetails(username, email, password)\r\n//         .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n//       return true;\r\n//     }\r\n//   }\r\n//   return false;\r\n// };\r\n\r\n// //Verify login details\r\n// export const sol_verifyLoginDetails = async (email, password) => {\r\n//   const acc = await sol_getCurrentAccount();\r\n//   if (acc) {\r\n//     const ElectionInstance = await sol_getElectionInstance();\r\n\r\n//     const loginData = await ElectionInstance.methods\r\n//       .getVoterDetails(acc)\r\n//       .call();\r\n\r\n//     const storedEmail = loginData.email;\r\n//     const storedPassowrd = loginData.password;\r\n//     const storedAccount = loginData.voterAddress;\r\n//     if (\r\n//       storedEmail === email &&\r\n//       storedPassowrd === password &&\r\n//       acc.toString().toLowerCase() === storedAccount.toString().toLowerCase()\r\n//     )\r\n//       return true;\r\n//   }\r\n//   return false;\r\n// };\r\n\r\n// // Get account details by address\r\n// export const sol_getUserDetails = async () => {\r\n//   const acc = await sol_getCurrentAccount();\r\n//   if (acc) {\r\n//     const ElectionInstance = await sol_getElectionInstance();\r\n\r\n//     const userData = await ElectionInstance.methods.getVoterDetails(acc).call();\r\n//     return userData;\r\n//   }\r\n//   return false;\r\n// };\r\n\r\n// // Check if voter exists or not\r\n// export const sol_isVoterExists = async (email) => {\r\n//   const acc = await sol_getCurrentAccount();\r\n//   const ElectionInstance = await sol_getElectionInstance();\r\n\r\n//   if (await ElectionInstance.methods.isVoterExists(acc, email).call())\r\n//     return true;\r\n//   else return false;\r\n// };\r\n// /*------------ Voter Verification functions ------------*/\r\n\r\n// export const sol_addVerificationRequest = async (prn, mobile) => {\r\n//   const acc = await sol_getCurrentAccount();\r\n//   if (acc) {\r\n//     const ElectionInstance = await sol_getElectionInstance();\r\n\r\n//     const addVerificationReq = await ElectionInstance.methods\r\n//       .addVerificationRequest(acc, prn, mobile)\r\n//       .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n\r\n//     return addVerificationReq;\r\n//   }\r\n// };\r\n\r\n// export const sol_approveVerificationRequests = async (approveAccount) => {\r\n//   const acc = await sol_getCurrentAccount();\r\n//   if (acc) {\r\n//     const ElectionInstance = await sol_getElectionInstance();\r\n\r\n//     const approveVerificationReq = await ElectionInstance.methods\r\n//       .approveVerificationRequests(approveAccount)\r\n//       .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n\r\n//     return true;\r\n//   } else {\r\n//     return false;\r\n//   }\r\n// };\r\n\r\n// export const sol_denyVerificationRequests = async (denyAccount) => {\r\n//   const acc = await sol_getCurrentAccount();\r\n//   if (acc) {\r\n//     const ElectionInstance = await sol_getElectionInstance();\r\n\r\n//     const denyVerificationReq = await ElectionInstance.methods\r\n//       .denyVerificationRequests(denyAccount)\r\n//       .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n\r\n//     return true;\r\n//   } else {\r\n//     return false;\r\n//   }\r\n// };\r\n\r\n// export const sol_getAllVoterDetails = async () => {\r\n//   const acc = await sol_getCurrentAccount();\r\n//   if (acc) {\r\n//     const ElectionInstance = await sol_getElectionInstance();\r\n\r\n//     const allVoterDetails = ElectionInstance.methods\r\n//       .getAllVoterDetails()\r\n//       .call();\r\n\r\n//     return allVoterDetails;\r\n//   }\r\n// };\r\n\r\n// // add candidate request\r\n\r\n// export const sol_addCandidateRequest = async (tagLine) => {\r\n//   const acc = await sol_getCurrentAccount();\r\n//   if (acc) {\r\n//     const ElectionInstance = await sol_getElectionInstance();\r\n\r\n//     const addCandidateReq = await ElectionInstance.methods\r\n//       .addCandidateRequest(acc, tagLine)\r\n//       .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n\r\n//     return addCandidateReq;\r\n//   }\r\n// };\r\n\r\n// export const sol_approveCandidateRequests = async (approveAccount) => {\r\n//   const acc = await sol_getCurrentAccount();\r\n//   if (acc) {\r\n//     const ElectionInstance = await sol_getElectionInstance();\r\n\r\n//     const approveCandidateReq = await ElectionInstance.methods\r\n//       .approveCandidateRequests(approveAccount)\r\n//       .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n\r\n//     return true;\r\n//   } else {\r\n//     return false;\r\n//   }\r\n// };\r\n\r\n// /*------------------------ Voting Handlers --------------------------- */\r\n\r\n// export const sol_addVote = async (candidateAddress) => {\r\n//   const acc = await sol_getCurrentAccount();\r\n//   if (acc) {\r\n//     const ElectionInstance = await sol_getElectionInstance();\r\n//     const voteSuccess = await ElectionInstance.methods\r\n//       .addVote(acc, candidateAddress)\r\n//       .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n//   }\r\n// };\r\n\r\n// export const sol_hasVoted = async () => {\r\n//   const acc = await sol_getCurrentAccount();\r\n//   if (acc) {\r\n//     const ElectionInstance = await sol_getElectionInstance();\r\n//     const hasCastedVote = await ElectionInstance.methods.hasVoted(acc).call();\r\n//     return hasCastedVote;\r\n//   } else return false;\r\n// };\r\n\r\n// /*------------------------ Reset Voter & Elections Details --------------------------- */\r\n\r\n// export const sol_resetElection = async () => {\r\n//   const acc = await sol_getCurrentAccount();\r\n//   const ElectionInstance = await sol_getElectionInstance();\r\n//   await ElectionInstance.methods\r\n//     .resetElection()\r\n//     .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport Web3 from \"web3\";\r\nimport Election from \"../contracts/Election.json\";\r\nconst _gas = 1000000;\r\nconst _gasPrice = 1000000;\r\n\r\nexport const sol_connectwallet = async () => {\r\n  let web3 = null,\r\n    error = null,\r\n    acc = null;\r\n  if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\r\n    try {\r\n      acc = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n      web3 = new Web3(window.ethereum);\r\n      return { acc, web3, error };\r\n    } catch (err) {\r\n      error = err.message;\r\n      return { acc, web3, error };\r\n    }\r\n  } else {\r\n    console.log(\"Please install MetaMask\");\r\n    error = \"Please install MetaMask!\";\r\n    return { acc, web3, error };\r\n  }\r\n};\r\n// export const sol_connectwallet = async () => {\r\n//   let acc = null;\r\n//   let error = null;\r\n//   let web3 = null;\r\n\r\n//   const isBrowser = typeof window !== \"undefined\";\r\n//   const hasMetaMask = isBrowser && typeof window.ethereum !== \"undefined\";\r\n\r\n//   if (hasMetaMask) {\r\n//     try {\r\n//       acc = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n//       web3 = new Web3(window.ethereum);\r\n//     } catch (err) {\r\n//       error = err.message;\r\n//     }\r\n//   } else {\r\n//     console.log(\"Please install MetaMask\");\r\n//     error = \"Please install MetaMask!\";\r\n//   }\r\n\r\n//   return { acc, web3, error };\r\n// };\r\n\r\nexport const sol_getElectionInstance = async () => {\r\n  // let web3 = null;\r\n\r\n  // const data = await sol_connectwallet();\r\n  // web3 = data.web3;\r\n  const web3 = await sol_getWeb3();\r\n  // Get the contract instance.\r\n  if (web3) {\r\n    const networkId = await web3.eth.net.getId();\r\n    const deployedNetwork = Election.networks[networkId];\r\n    const ElectionInstance = new web3.eth.Contract(\r\n      Election.abi,\r\n      deployedNetwork && deployedNetwork.address\r\n    );\r\n    return ElectionInstance;\r\n  }\r\n  return false;\r\n};\r\n\r\n// // GPT Code by Bijo , p ,p\r\n// export const sol_getElectionInstance = async () => {\r\n//   const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\r\n//   const networkId = await web3.eth.net.getId();\r\n//   const deployedNetwork = Election.networks[networkId];\r\n\r\n//   if (!deployedNetwork) {\r\n//     throw new Error(\"Contract not deployed to detected network\");\r\n//   }\r\n\r\n//   return new web3.eth.Contract(Election.abi, deployedNetwork.address);\r\n// };\r\n// // Prag , prch\r\n\r\nexport const sol_getWeb3 = async () => {\r\n  let web3 = null;\r\n\r\n  const data = await sol_connectwallet();\r\n  if (!data.error) {\r\n    web3 = data.web3;\r\n    return web3;\r\n  }\r\n  return false;\r\n};\r\n\r\n//Get current accout\r\nexport const sol_getCurrentAccount = async () => {\r\n  const data = await sol_connectwallet();\r\n  if (data.error) {\r\n    return false;\r\n  } else {\r\n    return data.acc[0];\r\n  }\r\n};\r\n\r\nexport const sol_isAdminAddress = async () => {\r\n  let acc = await sol_getCurrentAccount();\r\n  if (acc) {\r\n    const ElectionInstance = await sol_getElectionInstance();\r\n    const admin = await ElectionInstance.methods.getAdmin().call();\r\n\r\n    if (admin.toString().toLowerCase() === acc.toString().toLowerCase()) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const sol_getElectionDetails = async () => {\r\n  const ElectionInstance = await sol_getElectionInstance();\r\n  if (ElectionInstance) {\r\n    let data = await ElectionInstance.methods.getElectionDetails().call();\r\n\r\n    return data;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const sol_startElection = async (electionTitle, organizationName) => {\r\n  let acc = await sol_getCurrentAccount();\r\n  const ElectionInstance = await sol_getElectionInstance();\r\n  let data = sol_getElectionDetails();\r\n  const isElectionStarted = data[0];\r\n  if (acc) {\r\n    if (!isElectionStarted) {\r\n      await ElectionInstance.methods\r\n        .startElection(electionTitle, organizationName)\r\n        .send({ from: acc, gas: _gasPrice, gasPrice: _gasPrice });\r\n      return true;\r\n    }\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const sol_isPendingRequest = async () => {\r\n  const ElectionInstance = await sol_getElectionInstance();\r\n  const isPendingRequest = await ElectionInstance.methods\r\n    .isPendingRequest()\r\n    .call();\r\n  if (isPendingRequest) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const sol_changeElectionPhase = async () => {\r\n  const acc = await sol_getCurrentAccount();\r\n  const ElectionInstance = await sol_getElectionInstance();\r\n\r\n  let data = await ElectionInstance.methods.changeElectionPhase().send({\r\n    from: acc,\r\n    gas: _gasPrice,\r\n    gasPrice: _gasPrice,\r\n  });\r\n};\r\n\r\n//Add login details\r\nexport const sol_addLoginDetails = async (username, email, password) => {\r\n  const acc = await sol_getCurrentAccount();\r\n  if (acc) {\r\n    const ElectionInstance = await sol_getElectionInstance();\r\n    if (!(await ElectionInstance.methods.isVoterExists(acc, email).call())) {\r\n      try {\r\n        const web3 = new Web3(window.ethereum);\r\n        const _gasPrice = await web3.eth.getGasPrice();\r\n        await ElectionInstance.methods\r\n          .addVoterDetails(username, email, password)\r\n          .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n        return true;\r\n      } catch (error) {\r\n        console.error(\"Transaction error:\", error.message);\r\n        throw new Error(`Failed to add voter details: ${error.message}`);\r\n      }\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n//Verify login details\r\nexport const sol_verifyLoginDetails = async (email, password) => {\r\n  const acc = await sol_getCurrentAccount();\r\n  if (acc) {\r\n    const ElectionInstance = await sol_getElectionInstance();\r\n\r\n    const loginData = await ElectionInstance.methods\r\n      .getVoterDetails(acc)\r\n      .call();\r\n\r\n    const storedEmail = loginData.email;\r\n    const storedPassowrd = loginData.password;\r\n    const storedAccount = loginData.voterAddress;\r\n    if (\r\n      storedEmail === email &&\r\n      storedPassowrd === password &&\r\n      acc.toString().toLowerCase() === storedAccount.toString().toLowerCase()\r\n    )\r\n      return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n// Get account details by address\r\nexport const sol_getUserDetails = async () => {\r\n  const acc = await sol_getCurrentAccount();\r\n  if (acc) {\r\n    const ElectionInstance = await sol_getElectionInstance();\r\n\r\n    const userData = await ElectionInstance.methods.getVoterDetails(acc).call();\r\n    return userData;\r\n  }\r\n  return false;\r\n};\r\n\r\n// Check if voter exists or not\r\nexport const sol_isVoterExists = async (email) => {\r\n  const acc = await sol_getCurrentAccount();\r\n  const ElectionInstance = await sol_getElectionInstance();\r\n\r\n  if (await ElectionInstance.methods.isVoterExists(acc, email).call())\r\n    return true;\r\n  else return false;\r\n};\r\n/*------------ Voter Verification functions ------------*/\r\n\r\nexport const sol_addVerificationRequest = async (prn, mobile) => {\r\n  const acc = await sol_getCurrentAccount();\r\n  if (acc) {\r\n    const ElectionInstance = await sol_getElectionInstance();\r\n\r\n    const addVerificationReq = await ElectionInstance.methods\r\n      .addVerificationRequest(acc, prn, mobile)\r\n      .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n\r\n    return addVerificationReq;\r\n  }\r\n};\r\n\r\nexport const sol_approveVerificationRequests = async (approveAccount) => {\r\n  const acc = await sol_getCurrentAccount();\r\n  if (acc) {\r\n    const ElectionInstance = await sol_getElectionInstance();\r\n\r\n    const approveVerificationReq = await ElectionInstance.methods\r\n      .approveVerificationRequests(approveAccount)\r\n      .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const sol_denyVerificationRequests = async (denyAccount) => {\r\n  const acc = await sol_getCurrentAccount();\r\n  if (acc) {\r\n    const ElectionInstance = await sol_getElectionInstance();\r\n\r\n    const denyVerificationReq = await ElectionInstance.methods\r\n      .denyVerificationRequests(denyAccount)\r\n      .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const sol_getAllVoterDetails = async () => {\r\n  const acc = await sol_getCurrentAccount();\r\n  if (acc) {\r\n    const ElectionInstance = await sol_getElectionInstance();\r\n\r\n    const allVoterDetails = ElectionInstance.methods\r\n      .getAllVoterDetails()\r\n      .call();\r\n\r\n    return allVoterDetails;\r\n  }\r\n};\r\n\r\n// add candidate request\r\n\r\nexport const sol_addCandidateRequest = async (tagLine) => {\r\n  const acc = await sol_getCurrentAccount();\r\n  if (acc) {\r\n    const ElectionInstance = await sol_getElectionInstance();\r\n\r\n    const addCandidateReq = await ElectionInstance.methods\r\n      .addCandidateRequest(acc, tagLine)\r\n      .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n\r\n    return addCandidateReq;\r\n  }\r\n};\r\n\r\nexport const sol_approveCandidateRequests = async (approveAccount) => {\r\n  const acc = await sol_getCurrentAccount();\r\n  if (acc) {\r\n    const ElectionInstance = await sol_getElectionInstance();\r\n\r\n    const approveCandidateReq = await ElectionInstance.methods\r\n      .approveCandidateRequests(approveAccount)\r\n      .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\n/*------------------------ Voting Handlers --------------------------- */\r\n\r\nexport const sol_addVote = async (candidateAddress) => {\r\n  const acc = await sol_getCurrentAccount();\r\n  if (acc) {\r\n    const ElectionInstance = await sol_getElectionInstance();\r\n    const voteSuccess = await ElectionInstance.methods\r\n      .addVote(acc, candidateAddress)\r\n      .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n  }\r\n};\r\n\r\nexport const sol_hasVoted = async () => {\r\n  const acc = await sol_getCurrentAccount();\r\n  if (acc) {\r\n    const ElectionInstance = await sol_getElectionInstance();\r\n    const hasCastedVote = await ElectionInstance.methods.hasVoted(acc).call();\r\n    return hasCastedVote;\r\n  } else return false;\r\n};\r\n\r\n/*------------------------ Reset Voter & Elections Details --------------------------- */\r\n\r\nexport const sol_resetElection = async () => {\r\n  const acc = await sol_getCurrentAccount();\r\n  const ElectionInstance = await sol_getElectionInstance();\r\n  await ElectionInstance.methods\r\n    .resetElection()\r\n    .send({ from: acc, gas: _gas, gasPrice: _gasPrice });\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Navbar from \"../components/Navbar.js\";\r\nimport AlertMessage from \"../components/AlertMessage.js\";\r\nimport {\r\n  sol_addLoginDetails,\r\n  sol_connectwallet,\r\n} from \"../webaction/SolidityFunctionModules.js\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst RegisterScreen = () => {\r\n  //------------------------------ Style CSS -----------------------------------------//\r\n  const registerscreenstyle = {\r\n    minHeight: \"100%\",\r\n    backgroundImage: `url(\"./Images/wallpaper2.png\")`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundPosition: \"center center\",\r\n    backgroundSize: \"cover\",\r\n    width: \"100vw\",\r\n    height: \"84vh\",\r\n    // ---------------------------We added------------------------------------\r\n    display: \"flex\",\r\n    justifyContent: \"center\", // horizontal center\r\n    alignItems: \"center\", // vertical center\r\n    height: \"100vh\", // full screen height\r\n    backgroundColor: \"#0f172a\", // optional dark background\r\n    flexDirection: \"column\",\r\n    // ---------------------------We added------------------------------------\r\n  };\r\n\r\n  const registerformstyle = {\r\n    width: \"25%\",\r\n    minWidth: \"400px\",\r\n    background: \"#23263F\",\r\n    padding: \"8%\",\r\n    margin: \"1%\",\r\n    marginLeft: \"3%\",\r\n    borderRadius: \"20px\",\r\n  };\r\n  const metmamaskBtnStyle = {\r\n    color: \"#000000\",\r\n    fontSize: \"1.5em\",\r\n  };\r\n  const loginlinkstyle = {\r\n    textDecoration: \"none\",\r\n  };\r\n\r\n  const bgstyle = {\r\n    width: \"50%\",\r\n    margin: \"1% auto\",\r\n    background: \"rgba(0, 0, 0, 0.5)\",\r\n    padding: \"1%\",\r\n    color: \"#FFFFFF\",\r\n  };\r\n\r\n  //------------------------------ useStates Hooks -----------------------------------------//\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isAccountConnected, setIsAccountConnected] = useState(false);\r\n  const [currentAcc, setCurrentAcc] = useState(\"\");\r\n  const [errorConnectWallet, setErrorConnectWallet] = useState(null);\r\n  const [errorRegister, setErrorRegister] = useState(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  //------------------------------ Functions -----------------------------------------//\r\n\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault();\r\n    // check if user already exists\r\n    // if not then add to list\r\n    let result = await sol_addLoginDetails(username, email, password);\r\n    if (result) navigate(\"/dashboard\");\r\n    else setErrorRegister(\"User already exist!\");\r\n    // navigate to login\r\n  };\r\n\r\n  const onWalletConnection = async () => {\r\n    let data = await sol_connectwallet();\r\n    // console.log(\"data\", data);\r\n    if (data.error) {\r\n      setErrorConnectWallet(data.error);\r\n    } else {\r\n      setCurrentAcc(data.acc[0]);\r\n      setIsAccountConnected(true);\r\n    }\r\n  };\r\n\r\n  // ---------------------ADDED BY BIJO-----------------------------\r\n  // const onWalletConnection = async () => {\r\n  //   if (window.ethereum) {\r\n  //     try {\r\n  //       const accounts = await window.ethereum.request({\r\n  //         method: \"eth_requestAccounts\",\r\n  //       });\r\n  //       console.log(\"Connected accounts:\", accounts);\r\n  //       setCurrentAcc(accounts[0]);\r\n  //       setIsAccountConnected(true);\r\n  //       setErrorConnectWallet(null);\r\n  //     } catch (err) {\r\n  //       console.error(\"Wallet connection error:\", err);\r\n  //       setErrorConnectWallet(\"User rejected connection request.\");\r\n  //     }\r\n  //   } else {\r\n  //     setErrorConnectWallet(\"MetaMask not detected.\");\r\n  //   }\r\n  // };\r\n\r\n  // ---------------------ADDED BY BIJO-----------------------------\r\n\r\n  useEffect(() => {}, [currentAcc]); // this is not added by me, was already there\r\n\r\n  // ---------------------ADDED BY BIJO-----------------------------\r\n\r\n  // useEffect(() => {\r\n  //   if (window.ethereum) {\r\n  //     window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n  //       if (accounts.length > 0) {\r\n  //         setCurrentAcc(accounts[0]);\r\n  //         setIsAccountConnected(true);\r\n  //       } else {\r\n  //         setIsAccountConnected(false);\r\n  //         setCurrentAcc(\"\");\r\n  //       }\r\n  //     });\r\n  //   }\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (window.ethereum) {\r\n  //     window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n  //       setCurrentAcc(accounts[0]);\r\n  //       console.log(\"Switched to account:\", accounts[0]);\r\n  //     });\r\n  //   }\r\n  // }, []);\r\n\r\n  // ---------------------ADDED BY BIJO-----------------------------\r\n\r\n  //------------------------------ Render Content -----------------------------------------//\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"RegiterPageWallpaper\" style={registerscreenstyle}>\r\n        <div className=\"text-center fw-bold mt-2\" style={bgstyle}>\r\n          A MetaMask wallet is required for registration.{\" \"}\r\n          <a\r\n            style={loginlinkstyle}\r\n            href=\"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en\"\r\n            target=\"_blank\"\r\n          >\r\n            Click here to download.\r\n          </a>\r\n        </div>\r\n        <form onSubmit={submitHandler}>\r\n          <div className=\"container text-light\" style={registerformstyle}>\r\n            <div className=\"text-center\">\r\n              <h3>Register</h3>\r\n\r\n              {errorConnectWallet && (\r\n                <AlertMessage type=\"danger\" message={errorConnectWallet} />\r\n              )}\r\n              {errorRegister && (\r\n                <AlertMessage type=\"danger\" message={errorRegister} />\r\n              )}\r\n            </div>\r\n            <div>\r\n              <p>\r\n                Already have an account?\r\n                <Link style={loginlinkstyle} to=\"/login\">\r\n                  {\" \"}\r\n                  Login Here\r\n                </Link>\r\n              </p>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"studentName\" className=\"form-label\">\r\n                Name\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"studentName\"\r\n                placeholder=\"Enter Your Name Here...\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                required\r\n              ></input>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"studentEmail\" className=\"form-label\">\r\n                Email\r\n              </label>\r\n              <input\r\n                type=\"email\"\r\n                pattern=\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\r\n                className=\"form-control\"\r\n                id=\"studentEmail\"\r\n                placeholder=\"e.g. XYZ@gmail.com\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                required\r\n              ></input>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"studentPassword\" className=\"form-label\">\r\n                Password\r\n              </label>\r\n              <input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                id=\"studentPassword\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n              ></input>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <div className=\"d-grid gap-2\">\r\n                <label htmlFor=\"metamaskbtn\" className=\"form-label\">\r\n                  Metamask Wallet{\" \"}\r\n                  {isAccountConnected ? (\r\n                    <i\r\n                      style={{ color: \"green\" }}\r\n                      className=\"fa-solid fa-circle-check\"\r\n                    ></i>\r\n                  ) : (\r\n                    <i\r\n                      style={{ color: \"red\" }}\r\n                      className=\"fa-solid fa-circle-xmark\"\r\n                    ></i>\r\n                  )}\r\n                </label>\r\n                <button\r\n                  className={`btn ${\r\n                    isAccountConnected ? \"btn-success\" : \"btn-danger\"\r\n                  }  btn-lg fw-bold`}\r\n                  type=\"button\"\r\n                  id=\"metamaskbtn\"\r\n                  onClick={onWalletConnection}\r\n                  style={metmamaskBtnStyle}\r\n                >\r\n                  <img\r\n                    src=\"./Images/metamask.png\"\r\n                    alt=\"\"\r\n                    width=\"80\"\r\n                    height=\"40\"\r\n                  />\r\n                  METAMASK\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-warning btn-lg mt-4\"\r\n                  type=\"submit\"\r\n                  disabled={!isAccountConnected}\r\n                >\r\n                  Register\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterScreen;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Navbar from \"../components/Navbar.js\";\r\nimport AlertMessage from \"../components/AlertMessage.js\";\r\nimport {\r\n  sol_verifyLoginDetails,\r\n  sol_connectwallet,\r\n  sol_isAdminAddress,\r\n  sol_isVoterExists,\r\n} from \"../webaction/SolidityFunctionModules\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst LoginScreen = () => {\r\n  //------------------------------ Style CSS -----------------------------------------//\r\n  const Loginscreenstyle = {\r\n    minHeight: \"100%\",\r\n    backgroundImage: `url(\"./Images/wallpaper2.png\")`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundPosition: \"center center\",\r\n    backgroundSize: \"cover\",\r\n    width: \"100vw\",\r\n    height: \"84vh\",\r\n    // ----------we added--------------------------------------------------//\r\n    display: \"flex\",\r\n    justifyContent: \"center\", // centers horizontally\r\n    alignItems: \"center\", // centers vertically\r\n    height: \"100vh\", // full screen height\r\n    backgroundColor: \"#0f172a\",\r\n    // ----------we added--------------------------------------------------//\r\n  };\r\n\r\n  const loginformstyle = {\r\n    width: \"25%\",\r\n    minWidth: \"400px\",\r\n    background: \"#23263F\",\r\n    padding: \"8%\",\r\n    float: \"left\",\r\n    margin: \"3%\",\r\n    borderRadius: \"20px\",\r\n  };\r\n\r\n  const metmamaskBtnStyle = {\r\n    color: \"#000000\",\r\n    fontSize: \"1.5em\",\r\n  };\r\n\r\n  const registerlinkstyle = {\r\n    textDecoration: \"none\",\r\n  };\r\n\r\n  //------------------------------ useStates Hooks -----------------------------------------//\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isAccountConnected, setIsAccountConnected] = useState(false);\r\n  const [errorLogin, setErrorLogin] = useState(null);\r\n  const [currentAcc, setCurrentAcc] = useState(\"\");\r\n  const [errorConnectWallet, setErrorConnectWallet] = useState(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  //------------------------------ Functions -----------------------------------------//\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault();\r\n    // Verify login details\r\n    if (!(await sol_isAdminAddress())) {\r\n      if (await sol_isVoterExists(email)) {\r\n        let result = await sol_verifyLoginDetails(email, password);\r\n        if (result) navigate(\"/dashboard\");\r\n        else setErrorLogin(\"Wrong credentails!\");\r\n        // navigate to login\r\n      }\r\n      else setErrorLogin(\"Account does NOT exist. Register first.\")\r\n    } else setErrorLogin(\"Only Student can Login.\");\r\n  };\r\n\r\n  const onWalletConnection = async () => {\r\n    let data = await sol_connectwallet();\r\n    if (data.error) {\r\n      setErrorConnectWallet(data.error);\r\n    } else {\r\n      setCurrentAcc(data.acc[0]);\r\n      setIsAccountConnected(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {}, [errorConnectWallet, errorLogin]);\r\n\r\n  //------------------------------ Render Content -----------------------------------------//\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"LoginPageWallpaper\" style={Loginscreenstyle}>\r\n        <form onSubmit={submitHandler}>\r\n          <div className=\"container text-light\" style={loginformstyle}>\r\n            <div className=\"text-center\">\r\n              <h3>Login</h3>\r\n\r\n              {errorConnectWallet && (\r\n                <AlertMessage type=\"danger\" message={errorConnectWallet} />\r\n              )}\r\n              {errorLogin && (\r\n                <AlertMessage type=\"danger\" message={errorLogin} />\r\n              )}\r\n            </div>\r\n            <div>\r\n              <p>\r\n                Don't have an account?\r\n                <Link style={registerlinkstyle} to=\"/register\">\r\n                  {\" \"}\r\n                  Register Here\r\n                </Link>\r\n              </p>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"studentEmail\" className=\"form-label\">\r\n                Email\r\n              </label>\r\n              <input\r\n                type=\"email\"\r\n                pattern=\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\r\n                className=\"form-control\"\r\n                id=\"studentEmail\"\r\n                placeholder=\"e.g. xyz@gmail.com\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                required\r\n              ></input>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"studentPassword\" className=\"form-label\">\r\n                Password\r\n              </label>\r\n              <input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                id=\"studentPassword\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n              ></input>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <div className=\"d-grid gap-2\">\r\n                <label htmlFor=\"metamaskbtn\" className=\"form-label\">\r\n                  Metamask Wallet{\" \"}\r\n                  {isAccountConnected ? (\r\n                    <i\r\n                      style={{ color: \"green\" }}\r\n                      className=\"fa-solid fa-circle-check\"\r\n                    ></i>\r\n                  ) : (\r\n                    <i\r\n                      style={{ color: \"red\" }}\r\n                      className=\"fa-solid fa-circle-xmark\"\r\n                    ></i>\r\n                  )}\r\n                </label>\r\n                <button\r\n                  className={`btn ${\r\n                    isAccountConnected ? \"btn-success\" : \"btn-danger\"\r\n                  }  btn-lg fw-bold`}\r\n                  type=\"button\"\r\n                  id=\"metamaskbtn\"\r\n                  onClick={onWalletConnection}\r\n                  style={metmamaskBtnStyle}\r\n                >\r\n                  <img\r\n                    src=\"./Images/metamask.png\"\r\n                    alt=\"\"\r\n                    width=\"80\"\r\n                    height=\"40\"\r\n                  />\r\n                  METAMASK\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-warning btn-lg mt-4\"\r\n                  type=\"submit\"\r\n                  disabled={!isAccountConnected}\r\n                >\r\n                  Login\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport Logo from \"./Logo.js\";\r\nimport { sol_getElectionDetails } from \"../webaction/SolidityFunctionModules.js\";\r\n\r\nconst NavbarVertical = (props) => {\r\n  //------------------------------ Style CSS -----------------------------------------//\r\n  const navbarStyle = {\r\n    position: \"fixed\",\r\n    left: \"0\",\r\n    display: \"flex\",\r\n    height: \"100vh\",\r\n    width: \"15vw\",\r\n  };\r\n\r\n  const userDetailStyle = {\r\n    color: \"white\",\r\n    background: \"#696969\", // by soumya singh\r\n  };\r\n\r\n  //------------------------------ useState Hooks -----------------------------------------//\r\n  const navigate = useNavigate();\r\n  const [isAdminConnected, setIsAdminConnected] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [currentElectionPhase, setCurrentElectionPhase] = useState(\"\");\r\n  //assigning location variable\r\n  const location = useLocation();\r\n\r\n  //destructuring pathname from location\r\n  const { pathname } = location;\r\n  //Javascript split method to get the name of the path in array\r\n  const splitLocation = pathname.split(\"/\");\r\n\r\n  //------------------------------ Functions -----------------------------------------//\r\n\r\n  const getElectionDetails = async () => {\r\n    const data = await sol_getElectionDetails();\r\n    setCurrentElectionPhase(data[3]);\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    if (window.confirm(\"Are you sure want to logout ?\")) {\r\n      navigate(\"/login\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsAdminConnected(props.isAdmin);\r\n    setUsername(props.username);\r\n  }, [props.isAdmin, props.username]);\r\n\r\n  useEffect(() => {\r\n    getElectionDetails();\r\n  }, [currentElectionPhase]);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"list-group bg-primary\" style={navbarStyle}>\r\n          <div className=\"list-group-item list-group-item-action disabled bg-primary\">\r\n            <Logo />\r\n          </div>\r\n          <div\r\n            className=\"list-group-item list-group-item-action disabled \"\r\n            style={userDetailStyle}\r\n          >\r\n            {username} <br />\r\n            Role : {isAdminConnected ? \"Admin\" : \"Student\"}\r\n          </div>\r\n\r\n          {isAdminConnected ? (\r\n            <>\r\n              <Link\r\n                to=\"/electionsetup\"\r\n                className={`list-group-item list-group-item-action ${\r\n                  splitLocation[splitLocation.length - 1] === \"electionsetup\"\r\n                    ? \"active\"\r\n                    : \"\"\r\n                }`}\r\n              >\r\n                <i className=\"fa-solid fa-gears\"></i> Election Setup\r\n              </Link>\r\n              {currentElectionPhase === \"Voter Verification\" && (\r\n                <Link\r\n                  to=\"/verification\"\r\n                  className={`list-group-item list-group-item-action ${\r\n                    splitLocation[splitLocation.length - 1] === \"verification\"\r\n                      ? \"active\"\r\n                      : \"\"\r\n                  }`}\r\n                >\r\n                  <i className=\"fa-solid fa-user-check\"></i> Verification\r\n                </Link>\r\n              )}\r\n              {currentElectionPhase === \"Candidate Application\" && (\r\n                <Link\r\n                  to=\"/candidateverification\"\r\n                  className={`list-group-item list-group-item-action ${\r\n                    splitLocation[splitLocation.length - 1] ===\r\n                    \"candidateverification\"\r\n                      ? \"active\"\r\n                      : \"\"\r\n                  }`}\r\n                >\r\n                  <i className=\"fa-solid fa-user-check\"></i> Candidate\r\n                  Verification\r\n                </Link>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Link\r\n                to=\"/information\"\r\n                className={`list-group-item list-group-item-action ${\r\n                  splitLocation[splitLocation.length - 1] === \"information\"\r\n                    ? \"active\"\r\n                    : \"\"\r\n                }`}\r\n              >\r\n                <i className=\"fa-solid fa-circle-info\"></i> Information\r\n              </Link>\r\n              {((currentElectionPhase === \"Voter Verification\" ||\r\n                currentElectionPhase === \"Candidate Application\") && (\r\n                  <Link\r\n                    to=\"/voterverification\"\r\n                    className={`list-group-item list-group-item-action ${\r\n                      splitLocation[splitLocation.length - 1] ===\r\n                      \"voterverification\"\r\n                        ? \"active\"\r\n                        : \"\"\r\n                    }`}\r\n                  >\r\n                    <i className=\"fa-regular fa-id-card\"></i>\r\n                    {currentElectionPhase === \"Candidate Application\"\r\n                      ? \" Candidate Application\"\r\n                      : (currentElectionPhase === \"Result\" || currentElectionPhase === \"Voting\")\r\n                      ? \" Voter Profile\"\r\n                      : \" Voter Verification\"}\r\n                  </Link>\r\n                ))}\r\n              {currentElectionPhase === \"Voting\" && (\r\n                <Link\r\n                  to=\"/voting\"\r\n                  className={`list-group-item list-group-item-action ${\r\n                    splitLocation[splitLocation.length - 1] === \"voting\"\r\n                      ? \"active\"\r\n                      : \"\"\r\n                  }`}\r\n                >\r\n                  <i className=\"fa-solid fa-box-archive\"></i> Voting\r\n                </Link>\r\n              )}\r\n            </>\r\n          )}\r\n          {currentElectionPhase === \"Result\" && (\r\n            <Link\r\n              to=\"/result\"\r\n              className={`list-group-item list-group-item-action ${\r\n                splitLocation[splitLocation.length - 1] === \"result\"\r\n                  ? \"active\"\r\n                  : \"\"\r\n              }`}\r\n            >\r\n              <i className=\"fa-solid fa-square-poll-vertical\"></i> Result\r\n            </Link>\r\n          )}\r\n          <div\r\n            onClick={logoutHandler}\r\n            className=\"list-group-item list-group-item-action\"\r\n            style={{ cursor: \"pointer\" }}\r\n          >\r\n            <i className=\"fa-solid fa-right-from-bracket\"></i> Logout\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavbarVertical;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport NavbarVertical from \"../components/NavbarVertical.js\";\r\nimport {\r\n  sol_getUserDetails,\r\n  sol_isAdminAddress,\r\n  sol_getElectionDetails,\r\n} from \"../webaction/SolidityFunctionModules.js\";\r\n\r\nconst DashboardScreen = (props) => {\r\n  //------------------------------ Style CSS -----------------------------------------//\r\n  const floatleftstyle = {\r\n    float: \"left\",\r\n  };\r\n\r\n  const rightScreenStyle = {\r\n    float: \"left\",\r\n    width: \"80vw\",\r\n    height: \"auto\",\r\n    margin: \"auto\",\r\n    marginLeft: \"16vw\",\r\n    marginBottom: \"15vh\",\r\n    // backgroundImage: `url(\"./Images/wallpaper3.png\")`,\r\n  };\r\n\r\n  //------------------------------ useState Hooks -----------------------------------------//\r\n  const navigate = useNavigate();\r\n  const [isAdminConnected, setIsAdminConnected] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [currentElectionPhase, setCurrentElectionPhase] = useState(\"\");\r\n\r\n  //------------------------------ Functions -----------------------------------------//\r\n\r\n  const getElectionDetails = async () => {\r\n    const data = await sol_getElectionDetails();\r\n    setCurrentElectionPhase(data[3]);\r\n  };\r\n\r\n  const isAdmin = async () => {\r\n    const data = await sol_isAdminAddress();\r\n    setIsAdminConnected(data);\r\n  };\r\n\r\n  const getUserDetails = async () => {\r\n    const data = await sol_getUserDetails();\r\n    if (!data) {\r\n      navigate(\"/login\");\r\n    }\r\n    setUsername(data[\"username\"]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    isAdmin();\r\n    getUserDetails();\r\n    getElectionDetails();\r\n  }, [currentElectionPhase]);\r\n\r\n  return (\r\n    <>\r\n      <div style={floatleftstyle}>\r\n        <NavbarVertical\r\n          isAdmin={isAdminConnected ? true : false}\r\n          username={username}\r\n        />\r\n      </div>\r\n\r\n      <div style={rightScreenStyle}>{props.component}</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DashboardScreen;\r\n","import React from \"react\";\r\n\r\nconst InformationScreen = () => {\r\n  //------------------------------ Style CSS -----------------------------------------//\r\n  const cardStyle = {\r\n    width: \"80%\",\r\n    margin: \"3% auto\",\r\n  };\r\n\r\n  //------------------------------ Content Render -----------------------------------------//\r\n  return (\r\n    <>\r\n      <div className=\"card\" style={cardStyle}>\r\n        <h4 className=\"card-header text-center bg-primary text-light\">\r\n          User Manual\r\n        </h4>\r\n        <div className=\"card-body\">\r\n          <h4>Welcome! These are few guidelines for User.</h4>\r\n          <div className=\"card-text\">\r\n            <div>\r\n              <h5>1. Voter Registration</h5>\r\n              <ul>\r\n                <li>\r\n                  For casting the vote, student needs to first register to\r\n                  participate in voting process. Student can access registration\r\n                  form in <strong> \"Voter Verification\" </strong> menu once the\r\n                  registration phase starts.\r\n                </li>\r\n                <li>\r\n                  Student can only register in the{\" \"}\r\n                  <strong> Registration Phase</strong>. After the registration\r\n                  phase is over, the student can not register and thus will not\r\n                  be able to vote.\r\n                </li>\r\n                <li>\r\n                  For registration, the student will have to enter his PRN (Permanent Registration Number)\r\n                  and Mobile Number.\r\n                </li>\r\n              </ul>\r\n            </div>\r\n\r\n            <h5>2. Voting Process</h5>\r\n            <ul>\r\n              <li>\r\n                Overall voting process is divided into four phases. All of which\r\n                will be initialized and terminated by the admin. <br />\r\n                User will have to participate in the process according to\r\n                current phase.\r\n              </li>\r\n              <ol className=\"list-group list-group-numbered\">\r\n                <li className=\"list-group-item\">\r\n                  <strong>Registration Phase: </strong>\r\n                  During this phase the registration of the students will be\r\n                  carried out.\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  <strong>Candidate Application Phase: </strong>\r\n                  After all students get registered for voting, verified\r\n                  students by admin can apply as a candidate for ongoing\r\n                  election role.\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  <strong>Voting Phase: </strong>\r\n                  After initialization of voting phase from the admin, user can\r\n                  cast the vote in voting section. The casting of vote can be\r\n                  simply done by clicking on \"VOTE\" button next to chosen\r\n                  candidate. After which the transaction will be initiated and on\r\n                  confirmation, the vote will get casted successfully. Students\r\n                  can vote only when the voting phase is active.\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  <strong>Result Phase: </strong>\r\n                  This is the final stage of whole voting procedure during which\r\n                  the results and analysis of election\r\n                  will be displayed at \"Result\" section.\r\n                </li>\r\n              </ol>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InformationScreen;\r\n","import React from \"react\";\r\n\r\nconst RequiredFieldStar = () => {\r\n  return <span style={{ color: \"tomato\" }}>*</span>;\r\n};\r\n\r\nexport default RequiredFieldStar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  sol_isAdminAddress,\r\n  sol_getElectionDetails,\r\n} from \"../webaction/SolidityFunctionModules.js\";\r\n\r\nconst ElectionInitializeMsg = (props) => {\r\n  //------------------------------ style CSS -----------------------------------------//\r\n  const bgstyle = {\r\n    background: \"#ffdd99\",\r\n  };\r\n\r\n  //------------------------------ useState Hooks -----------------------------------------//\r\n  const [isAdminConnected, setIsAdminConnected] = useState(false);\r\n  const [storedElectionTitle, setStoredElectionTitle] = useState(\"\");\r\n  const [isElectionStarted, setIsElectionStarted] = useState(false);\r\n  const [currentElectionPhase, setCurrentElectionPhase] = useState(\"\");\r\n  const [organizationName, setOrganizationName] = useState(\"\");\r\n\r\n  //------------------------------ Functions -----------------------------------------//\r\n\r\n  const getElectionDetails = async () => {\r\n    const data = await sol_getElectionDetails();\r\n    setIsElectionStarted(data[0]);\r\n    setStoredElectionTitle(data[1]);\r\n    setOrganizationName(data[2]);\r\n    setCurrentElectionPhase(data[3]);\r\n  };\r\n\r\n  const isAdmin = async () => {\r\n    const data = await sol_isAdminAddress();\r\n    setIsAdminConnected(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    isAdmin();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getElectionDetails();\r\n  }, [props]);\r\n\r\n  //------------------------------ Render Content -----------------------------------------//\r\n  return (\r\n    <div\r\n      className=\"alert alert-light text-center fw-bold mt-2\"\r\n      style={bgstyle}\r\n      role=\"alert\"\r\n    >\r\n      {isElectionStarted ? (\r\n        <>\r\n          <h3>\r\n            The election of {organizationName} for the role of {storedElectionTitle} has been started!\r\n          </h3>\r\n          <p>\r\n            Current Election Phase is:{\" \"}\r\n            <span className=\"text-success\">{currentElectionPhase}</span>\r\n          </p>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h3>The election has not been initialized yet!</h3>\r\n          {isAdminConnected ? (\r\n            <p>Set up the election.</p>\r\n          ) : (\r\n            <p>Please wait till the admin starts the election</p>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ElectionInitializeMsg;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { sol_getCurrentAccount } from \"../webaction/SolidityFunctionModules.js\";\r\n\r\nconst YourAccount = () => {\r\n  //------------------------------ useState Hooks -----------------------------------------//\r\n\r\n  const [currentAccount, setCurrentAccount] = useState(null);\r\n\r\n  //------------------------------ Functions -----------------------------------------//\r\n\r\n  const getCurrentAccount = async () => {\r\n    const data = await sol_getCurrentAccount();\r\n    setCurrentAccount(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCurrentAccount();\r\n  },[]);\r\n\r\n  //------------------------------ Render Content -----------------------------------------//\r\n\r\n  return (\r\n    <div className=\"alert alert-success text-center fw-bold mt-3\" role=\"alert\">\r\n      Your Account: {currentAccount}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YourAccount;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport RequiredFieldStar from \"../components/RequiredFieldStar.js\";\r\nimport ElectionInitializeMsg from \"../components/ElectionInitializeMsg.js\";\r\nimport YourAccount from \"../components/YourAccount.js\";\r\nimport \"./admin/css/VerificationScreen.css\";\r\nimport {\r\n  sol_addVerificationRequest,\r\n  sol_isAdminAddress,\r\n  sol_getUserDetails,\r\n  sol_addCandidateRequest,\r\n  sol_getElectionDetails,\r\n} from \"../webaction/SolidityFunctionModules.js\";\r\n\r\nconst VoterVerificationScreen = () => {\r\n  //------------------------------ style CSS -----------------------------------------//\r\n\r\n  const tablestyle = {\r\n    width: \"60%\",\r\n    margin: \"auto\",\r\n    marginleft: \"0\",\r\n    padding: \"1em\",\r\n    border: \"1px solid #000000 !important\",\r\n    backgroundcolor: \"#90EE90\",\r\n  };\r\n\r\n  const divisionstyle = {\r\n    width: \"50%\",\r\n    background: \"#C2DAF7\",\r\n    padding: \"2%\",\r\n    margin: \"3% auto\",\r\n  };\r\n\r\n  const ystyle = {\r\n    margin: \"0.1em\",\r\n    padding: \"0.5em\",\r\n    display: \"block\",\r\n  };\r\n\r\n  //------------------------------ userState Hooks  -----------------------------------------//\r\n  const navigate = useNavigate();\r\n  const [isAdminConnected, setIsAdminConnected] = useState(false);\r\n  const [prn, setPrn] = useState(\"\");\r\n  const [mobile, setMobile] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [isDenied, setIsDenied] = useState(false);\r\n  const [isCandidate, setIsCandidate] = useState(false);\r\n  const [tagLine, setTagLine] = useState(\"\");\r\n  const [currentElectionPhase, setCurrentElectionPhase] = useState(\"\");\r\n  const [hasApplied, setHasApplied] = useState(false);\r\n\r\n  //------------------------------ Functions  -----------------------------------------//\r\n  const submitHandler = (e) => {\r\n    // prevent form loading\r\n    e.preventDefault();\r\n    applyForVerification();\r\n  };\r\n\r\n  const candidateHandler = (e) => {\r\n    // prevent form loading\r\n    e.preventDefault();\r\n\r\n    applyForCandidate();\r\n  };\r\n  const getElectionDetails = async () => {\r\n    const data = await sol_getElectionDetails();\r\n    setCurrentElectionPhase(data[3]);\r\n  };\r\n\r\n  const getUserDetails = async () => {\r\n    const data = await sol_getUserDetails();\r\n    if (!data) {\r\n      navigate(\"/login\");\r\n    }\r\n    setUsername(data[\"username\"]);\r\n    setPrn(data[\"voterElectionDetails\"][\"prn\"]);\r\n    setMobile(data[\"voterElectionDetails\"][\"mobile\"]);\r\n    setIsVerified(data[\"voterElectionDetails\"][\"isVerified\"]);\r\n    setIsDenied(data[\"voterElectionDetails\"][\"isDenied\"]);\r\n    setIsCandidate(data[\"voterElectionDetails\"][\"isCandidate\"]);\r\n    setHasApplied(data[\"voterElectionDetails\"][\"hasApplied\"]);\r\n    console.log(isVerified);\r\n  };\r\n\r\n  const applyForVerification = async () => {\r\n    const addVerificationReq = await sol_addVerificationRequest(prn, mobile);\r\n    setHasApplied(true);\r\n  };\r\n\r\n  const applyForCandidate = async () => {\r\n    const addCandidateReq = await sol_addCandidateRequest(tagLine);\r\n    setHasApplied(true);\r\n  };\r\n\r\n  const routeValidation = async () => {\r\n    const data = await sol_isAdminAddress();\r\n    if (data) {\r\n      navigate(\"/dashboard\");\r\n    }\r\n    setIsAdminConnected(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    routeValidation();\r\n\r\n    getElectionDetails();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getUserDetails();\r\n  }, [hasApplied]);\r\n\r\n  //------------------------------ Render Content -----------------------------------------//\r\n  return (\r\n    <>\r\n      <YourAccount />\r\n      <ElectionInitializeMsg isAdmin={isAdminConnected} />\r\n      <div className=\"container-main\">\r\n        {!isVerified && currentElectionPhase === \"Voter Verification\" && (\r\n          <>\r\n            {isDenied && !hasApplied && (\r\n              <div\r\n                className=\"text-center bg-danger text-light fw-bold fs-4\"\r\n                style={divisionstyle}\r\n              >\r\n                <div>Your application has been denied by the Admin!</div>\r\n                <div>Please submit valid details to get verified as voter.</div>\r\n              </div>\r\n            )}\r\n            <h2>Apply for Voter Verification</h2>\r\n            {hasApplied ? (\r\n              <div\r\n                className=\"text-center bg-info text-light fw-bold fs-4\"\r\n                style={divisionstyle}\r\n              >\r\n                <div>Applied Successfully!</div>\r\n                <div>Please wait for admin to verify your details.</div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"container-item\">\r\n                <form onSubmit={submitHandler}>\r\n                  <div className=\"container\" style={divisionstyle}>\r\n                    <div className=\"mb-2\">\r\n                      <label\r\n                        htmlFor=\"studentPRNNO\"\r\n                        className=\"form-label\"\r\n                        style={ystyle}\r\n                      >\r\n                        PRN (8 digit) <RequiredFieldStar />\r\n                        <input\r\n                          type=\"tel\"\r\n                          pattern=\"[0-9]{8}\"\r\n                          maxLength={8}\r\n                          className=\"form-control\"\r\n                          id=\"studentPRNNo\"\r\n                          placeholder=\"Enter your permanent registration number\"\r\n                          value={prn}\r\n                          onChange={(e) => setPrn(e.target.value)}\r\n                          required\r\n                        />\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"mb-2\">\r\n                      <label\r\n                        htmlFor=\"studentPhoneno\"\r\n                        className=\"form-label\"\r\n                        style={ystyle}\r\n                      >\r\n                        Mobile number <RequiredFieldStar />\r\n                        <input\r\n                          type=\"tel\"\r\n                          pattern=\"[0-9]{10}\"\r\n                          maxLength={10}\r\n                          className=\"form-control\"\r\n                          id=\"studentPhoneno\"\r\n                          placeholder=\"Enter your mobile number\"\r\n                          value={mobile}\r\n                          onChange={(e) => setMobile(e.target.value)}\r\n                          required\r\n                        />\r\n                      </label>\r\n                    </div>\r\n                    <p className=\"note\">\r\n                      <span className=\"text-danger\"> Note: </span>\r\n                      <br /> Make sure your 8 digit PRN is correct. <br /> Admin\r\n                      might not approve your account if the provided PRN does\r\n                      not matches the account registered in admin's catalogue.\r\n                    </p>\r\n\r\n                    <div className=\"d-grid gap-2 mt-3\">\r\n                      <button className=\"btn btn-primary btn-lg\" type=\"submit\">\r\n                        Apply\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n      {!hasApplied && !isCandidate && isVerified && !isDenied && (\r\n        <div\r\n          className=\"text-center bg-info text-light fw-bold fs-4\"\r\n          style={divisionstyle}\r\n        >\r\n          <div>You are verified successfully!</div>\r\n          {currentElectionPhase === \"Voter Verification\" ? (\r\n            <div>Please wait for the next phase of the election.</div>\r\n          ) : (\r\n            <div>Now you can apply as a candidate if interested!</div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {isVerified &&\r\n        !isCandidate &&\r\n        currentElectionPhase === \"Candidate Application\" &&\r\n        !isDenied && (\r\n          <>\r\n            <div className=\"container-main\">\r\n              {hasApplied ? (\r\n                <div\r\n                  className=\"text-center bg-info text-light fw-bold fs-4\"\r\n                  style={divisionstyle}\r\n                >\r\n                  <div>Applied Successfully!</div>\r\n                  <div>Please wait for admin's approval.</div>\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  <h2>Apply For Candidate</h2>\r\n                  <div className=\"container-item\">\r\n                    <form onSubmit={candidateHandler}>\r\n                      <div className=\"container\" style={divisionstyle}>\r\n                        <div className=\"mb-3\">\r\n                          <label\r\n                            htmlFor=\"studentTagline\"\r\n                            className=\"form-label\"\r\n                            style={ystyle}\r\n                          >\r\n                            Enter Your Tagline <RequiredFieldStar />\r\n                            <textarea\r\n                              className=\"form-control\"\r\n                              placeholder=\"Write your tagline here\"\r\n                              id=\"studentTagline\"\r\n                              style={{ height: \"100px\" }}\r\n                              onChange={(e) => setTagLine(e.target.value)}\r\n                              maxLength=\"100\"\r\n                              required\r\n                            ></textarea>\r\n                          </label>\r\n                        </div>\r\n                        <p className=\"note\">\r\n                          <span className=\"text-danger\"> Note: </span>\r\n                          <br />\r\n                          Please describe yourself in one or two lines.\r\n                          <br />\r\n                          Depending on your profile, admin will approve or deny\r\n                          your request for candidate.\r\n                        </p>\r\n                        <div className=\"d-grid gap-2 mt-3\">\r\n                          <button\r\n                            className=\"btn btn-primary btn-lg\"\r\n                            type=\"submit\"\r\n                          >\r\n                            Apply\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n      {isDenied &&\r\n        currentElectionPhase === \"Candidate Application\" &&\r\n        isVerified && (\r\n          <div\r\n            className=\"text-center bg-danger text-light fw-bold fs-4\"\r\n            style={divisionstyle}\r\n          >\r\n            <div>Your Candidate application has been denied by the Admin!</div>\r\n            <div>But you can still vote for other candidates.</div>\r\n          </div>\r\n        )}\r\n\r\n      {isDenied &&\r\n        !hasApplied &&\r\n        !isVerified &&\r\n        currentElectionPhase !== \"Voter Verification\" && (\r\n          <div\r\n            className=\"text-center bg-danger text-light fw-bold fs-4\"\r\n            style={divisionstyle}\r\n          >\r\n            <div>You are not verified as a voter.</div>\r\n            <div>You can not participate in the Election.</div>\r\n          </div>\r\n        )}\r\n\r\n      {isCandidate && currentElectionPhase === \"Candidate Application\" && (\r\n        <div\r\n          className=\"text-center bg-info text-light fw-bold fs-4\"\r\n          style={divisionstyle}\r\n        >\r\n          <div>Congratulations!!! </div>\r\n          <div>Approved as a Candidate by Admin!</div>\r\n          <div>Students can vote you now in the next voting phase!</div>\r\n          <div>All the best.</div>\r\n        </div>\r\n      )}\r\n      {isVerified && (\r\n        <>\r\n          <div className={\"container-item \"}>\r\n            <div\r\n              className=\"alert alert-primary text-center fw-bold mt-2\"\r\n              role=\"alert\"\r\n            >\r\n              <h5>Your Registered Information</h5>\r\n            </div>\r\n          </div>\r\n          <div className={\"container-list \"}>\r\n            <table className=\"table table-striped mt-5 \" style={tablestyle}>\r\n              <tbody>\r\n                <tr>\r\n                  <th>Name</th>\r\n                  <td>{username}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Mobile</th>\r\n                  <td>{mobile}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>PRN</th>\r\n                  <td>{prn}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Verification Status</th>\r\n                  <td>{isVerified ? \"Verified\" : \"Not Verified\"}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Candidate Status</th>\r\n                  <td>{isCandidate ? \"Candidate\" : \"Not Candidate\"}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default VoterVerificationScreen;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ElectionInitializeMsg from \"../../components/ElectionInitializeMsg.js\";\r\nimport YourAccount from \"../../components/YourAccount.js\";\r\nimport AlertMessage from \"../../components/AlertMessage.js\";\r\n\r\nimport {\r\n  sol_isAdminAddress,\r\n  sol_startElection,\r\n  sol_getElectionDetails,\r\n  sol_changeElectionPhase,\r\n  sol_resetElection,\r\n  sol_isPendingRequest,\r\n} from \"../../webaction/SolidityFunctionModules.js\";\r\n\r\nconst ElectionSetupScreen = () => {\r\n  //------------------------------ style CSS -----------------------------------------//\r\n  const aboutelectionstyle = {\r\n    width: \"60%\",\r\n    background: \"#FFF8DC\",\r\n    padding: \"3%\",\r\n    margin: \"2% auto\",\r\n  };\r\n\r\n  //------------------------------ useState Hooks -----------------------------------------//\r\n\r\n  const [errorPendingRequests, setErrorPendingRequests] = useState(\"\");\r\n  const [electionTitle, setElectionTitle] = useState(\"\");\r\n  const [classes, setClasses] = useState(\"\");\r\n  const [degree, setDegree] = useState(\"\");\r\n  const [stream, setStream] = useState(\"\");\r\n  const [isElectionStarted, setIsElectionStarted] = useState(false);\r\n  const [currentElectionPhase, setCurrentElectionPhase] = useState(\"\");\r\n  const [nextElectionPhase, setNextElectionPhase] = useState(\"\");\r\n  const navigate = useNavigate();\r\n  //------------------------------ Functions -----------------------------------------//\r\n\r\n  const routeValidation = async () => {\r\n    const data = await sol_isAdminAddress();\r\n    if (!data) {\r\n      navigate(\"/dashboard\");\r\n    }\r\n  };\r\n\r\n  const getElectionDetails = async () => {\r\n    const data = await sol_getElectionDetails();\r\n    setIsElectionStarted(data[0]);\r\n    setCurrentElectionPhase(data[3]);\r\n    setNextElectionPhase(data[4]);\r\n  };\r\n\r\n  const changeElectionPhase = async () => {\r\n    const data = await sol_isPendingRequest();\r\n    if (!data) {\r\n      const data = await sol_changeElectionPhase();\r\n      window.location.reload(false);\r\n    } else {\r\n      setErrorPendingRequests(\"Please clear all pending requests first.\");\r\n    }\r\n  };\r\n\r\n  const startElection = async (electionTitle) => {\r\n    let organizationName = classes + \" \" + degree + \" \" + stream;\r\n    const data = await sol_startElection(electionTitle, organizationName);\r\n    if (data) {\r\n      getElectionDetails();\r\n    }\r\n    window.location.reload(false);\r\n  };\r\n\r\n  const resetElection = async () => {\r\n    await sol_resetElection();\r\n    getElectionDetails();\r\n    window.location.reload(false);\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    startElection(electionTitle);\r\n  };\r\n\r\n  useEffect(() => {\r\n    routeValidation();\r\n    getElectionDetails();\r\n  }, [currentElectionPhase]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <YourAccount />\r\n        <ElectionInitializeMsg currentElectionPhase={currentElectionPhase} />\r\n        {isElectionStarted && (\r\n          <>\r\n            {errorPendingRequests && (\r\n              <AlertMessage type=\"danger\" message={errorPendingRequests} />\r\n            )}\r\n            <h3>Change Phase</h3>\r\n            <div className=\"container\" style={aboutelectionstyle}>\r\n              <h4>\r\n                Current Phase:{\" \"}\r\n                <span className=\"text-success\">{currentElectionPhase}</span>\r\n              </h4>\r\n              {nextElectionPhase === \"Setup Election\" ? (\r\n                <>\r\n                  <h4>\r\n                    <span className=\"text-danger\">Election Ended.</span>\r\n                  </h4>\r\n                  <div className=\"d-grid gap-2 mt-3\">\r\n                    <button\r\n                      className=\"btn btn-primary btn-lg\"\r\n                      type=\"button\"\r\n                      onClick={resetElection}\r\n                    >\r\n                      Reset Election\r\n                    </button>\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <h4>\r\n                    Next Phase:{\" \"}\r\n                    <span className=\"text-danger\">{nextElectionPhase}</span>\r\n                  </h4>\r\n                  <div className=\"d-grid gap-2 mt-3\">\r\n                    <button\r\n                      className=\"btn btn-primary btn-lg\"\r\n                      type=\"button\"\r\n                      onClick={changeElectionPhase}\r\n                    >\r\n                      Change Phase\r\n                    </button>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n        {!isElectionStarted && (\r\n          <>\r\n            <h3>About Election</h3>\r\n            <form onSubmit={submitHandler}>\r\n              <div className=\"container\" style={aboutelectionstyle}>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"electionTitle\" className=\"form-label\">\r\n                    Election Title\r\n                  </label>\r\n                  <select\r\n                    className=\"form-select\"\r\n                    aria-label=\"Default select example\"\r\n                    id=\"electionTitle\"\r\n                    onChange={(e) => setElectionTitle(e.target.value)}\r\n                    required\r\n                  >\r\n                    <option hidden>Choose Title</option>\r\n                    <option value=\"Class Representative\">\r\n                      Class Representative\r\n                    </option>\r\n                    <option value=\"Placement Coordinator\">\r\n                      Placement Coordinator\r\n                    </option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"row align-items-center\">\r\n                  <div className=\"col-4 \">\r\n                    <label htmlFor=\"electionClassYear\" className=\"form-label\">\r\n                      Class Year\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"col-4\">\r\n                    <label htmlFor=\"electionClassDegree\" className=\"form-label\">\r\n                      Choose Degree\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"col-4\">\r\n                    <label htmlFor=\"electionStream\" className=\"form-label\">\r\n                      Choose Stream\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row align-items-center mb-3\">\r\n                  <div className=\"col-4 \">\r\n                    <select\r\n                      className=\"form-select\"\r\n                      aria-label=\"Default select example\"\r\n                      id=\"electionClassYear\"\r\n                      onChange={(e) => setClasses(e.target.value)}\r\n                      required\r\n                    >\r\n                      <option hidden>Choose Class Year</option>\r\n                      <option value=\"FY\">FY</option>\r\n                      <option value=\"SY\">SY</option>\r\n                      <option value=\"TY\">TY</option>\r\n                    </select>\r\n                  </div>\r\n                  <div className=\"col-4\">\r\n                    <select\r\n                      className=\"form-select\"\r\n                      aria-label=\"Default select example\"\r\n                      id=\"electionClassDegree\"\r\n                      onChange={(e) => setDegree(e.target.value)}\r\n                      required\r\n                    >\r\n                      <option hidden>Choose Degree</option>\r\n                      <option value=\"B.Sc\">B.Sc</option>\r\n                      <option value=\"M.Sc\">M.Sc</option>\r\n                    </select>\r\n                  </div>\r\n                  <div className=\"col-4\">\r\n                    <select\r\n                      className=\"form-select\"\r\n                      aria-label=\"Default select example\"\r\n                      id=\"electionStream\"\r\n                      onChange={(e) => setStream(e.target.value)}\r\n                      required\r\n                    >\r\n                      <option hidden>Choose Stream</option>\r\n                      <option value=\"Computer Science\">Computer Science</option>\r\n                      <option value=\"Computer Application\">\r\n                        Computer Application\r\n                      </option>\r\n                      <option value=\"IMCA\">IMCA</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                  <div className=\"d-grid gap-2\">\r\n                    <button\r\n                      className=\"btn btn-primary btn-lg\"\r\n                      type=\"submit\"\r\n                      disabled={isElectionStarted}\r\n                    >\r\n                      Start Election\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ElectionSetupScreen;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./css/VerificationScreen.css\";\r\nimport ElectionInitializeMsg from \"../../components/ElectionInitializeMsg.js\";\r\nimport YourAccount from \"../../components/YourAccount.js\";\r\nimport {\r\n  sol_getAllVoterDetails,\r\n  sol_isAdminAddress,\r\n  sol_approveVerificationRequests,\r\n  sol_denyVerificationRequests,\r\n  sol_getElectionDetails,\r\n  sol_isPendingRequest,\r\n} from \"../../webaction/SolidityFunctionModules.js\";\r\n\r\nconst VerificationScreen = () => {\r\n  //------------------------------ useState Hooks -----------------------------------------//\r\n\r\n  const navigate = useNavigate();\r\n  const [voterData, setVoterData] = useState([]);\r\n  const [isApproved, setIsApproved] = useState(false);\r\n  const [atLeastOneVerified, setAtLeastOneVerified] = useState(false);\r\n  const [atLeastOnePending, setAtLeastOnePending] = useState(false);\r\n  const [currentElectionPhase, setCurrentElectionPhase] = useState(\"\");\r\n\r\n  //---------------------------------style----------------------------------------------//\r\n\r\n  const buttonStyle = {\r\n    width: \"40%\",\r\n    marginRight: \"10%\",\r\n  };\r\n\r\n  //------------------------------ Functions -----------------------------------------//\r\n  const onClickApprove = async (voterAddress) => {\r\n    const data = await sol_approveVerificationRequests(voterAddress);\r\n    setIsApproved(data);\r\n    isPendingRequest();\r\n  };\r\n\r\n  const onClickDeny = async (voterAddress) => {\r\n    const data = await sol_denyVerificationRequests(voterAddress);\r\n    setIsApproved(data);\r\n    isPendingRequest();\r\n  };\r\n\r\n  const routeValidation = async () => {\r\n    const data = await sol_isAdminAddress();\r\n    if (!data) {\r\n      navigate(\"/dashboard\");\r\n    }\r\n  };\r\n\r\n  const getElectionDetails = async () => {\r\n    const data = await sol_getElectionDetails();\r\n    setCurrentElectionPhase(data[3]);\r\n  };\r\n\r\n  const isPendingRequest = async () => {\r\n    const data = await sol_isPendingRequest();\r\n    if (!data) {\r\n      setAtLeastOnePending(false);\r\n    }\r\n  };\r\n\r\n  const getAllVoterDetails = async () => {\r\n    const data = await sol_getAllVoterDetails();\r\n    let allVoterDetails = [];\r\n    if (data) {\r\n      for (let i = 0; i < data.length; i++) {\r\n        let temp = {};\r\n\r\n        temp[\"voterAddress\"] = data[i][\"voterAddress\"];\r\n        temp[\"username\"] = data[i][\"username\"];\r\n        temp[\"prn\"] = data[i][\"voterElectionDetails\"][\"prn\"];\r\n        temp[\"mobile\"] = data[i][\"voterElectionDetails\"][\"mobile\"];\r\n        temp[\"isVerified\"] = data[i][\"voterElectionDetails\"][\"isVerified\"];\r\n        temp[\"hasApplied\"] = data[i][\"voterElectionDetails\"][\"hasApplied\"];\r\n        if (!atLeastOneVerified && temp[\"isVerified\"]) {\r\n          setAtLeastOneVerified(true);\r\n        }\r\n        if (!atLeastOnePending && temp[\"hasApplied\"]) {\r\n          setAtLeastOnePending(true);\r\n        }\r\n        allVoterDetails.push(temp);\r\n      }\r\n\r\n      setVoterData([...allVoterDetails]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getElectionDetails();\r\n    routeValidation();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsApproved(false);\r\n    getAllVoterDetails();\r\n  }, [isApproved]);\r\n\r\n  //------------------------------ Render Content -----------------------------------------//\r\n  return (\r\n    <>\r\n      <YourAccount />\r\n      <ElectionInitializeMsg />\r\n      {currentElectionPhase === \"Voter Verification\" && (\r\n        <div className=\"container\">\r\n          <div\r\n            className=\"alert alert-primary text-center fw-bold mt-3\"\r\n            role=\"alert\"\r\n          >\r\n            List of registered students\r\n          </div>\r\n          <h3>Pending Approvals: </h3>\r\n\r\n          <table\r\n            className=\"table table-striped mt-5\"\r\n            style={{ width: \"100%\", margin: \"auto\" }}\r\n          >\r\n            <tbody>\r\n              <tr>\r\n                <th>Student's Name </th>\r\n                <th>Mobile No </th>\r\n                <th>PRN </th>\r\n                <th>Verification Status</th>\r\n                <th></th>\r\n                <th></th>\r\n              </tr>\r\n              {!atLeastOnePending && (\r\n                <tr>\r\n                  <th colSpan={6} className=\"text-center\">\r\n                    No Pending Requests!\r\n                  </th>\r\n                </tr>\r\n              )}\r\n              {voterData.map((student, key) => {\r\n                return (\r\n                  <>\r\n                    {student.hasApplied && (\r\n                      <tr key={key}>\r\n                        <td>{student.username}</td>\r\n                        <td>{student.mobile}</td>\r\n                        <td>{student.prn}</td>\r\n                        <td> {student.isVerified ? \"Verified\" : \"Pending\"}</td>\r\n                        <td colSpan={2}>\r\n                          <div className=\"\">\r\n                            <button\r\n                              className=\"btn btn-success text-light\"\r\n                              type=\"button\"\r\n                              style={buttonStyle}\r\n                              onClick={() => {\r\n                                onClickApprove(student.voterAddress);\r\n                              }}\r\n                            >\r\n                              Approve\r\n                            </button>\r\n\r\n                            <button\r\n                              className=\"btn btn-danger text-light\"\r\n                              type=\"button\"\r\n                              style={buttonStyle}\r\n                              onClick={() => {\r\n                                onClickDeny(student.voterAddress);\r\n                              }}\r\n                            >\r\n                              Deny\r\n                            </button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    )}\r\n                  </>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n\r\n          <h3 className=\"mt-4\">Approved Students: </h3>\r\n          <table\r\n            className=\"table mt-4\"\r\n            style={{\r\n              width: \"75%\",\r\n              margin: \"auto\",\r\n              background: \"#a3ffb4\",\r\n            }}\r\n          >\r\n            <tbody>\r\n              <tr>\r\n                <th>Student's Name </th>\r\n                <th>PRN </th>\r\n              </tr>\r\n              {!atLeastOneVerified && (\r\n                <tr>\r\n                  <th colSpan={2} className=\"text-center\">\r\n                    No Approved Voters!\r\n                  </th>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n          {voterData.map((student, key) => {\r\n            return (\r\n              <div className=\"container\" key={key}>\r\n                {student.isVerified && (\r\n                  <>\r\n                    <table\r\n                      className=\"table\"\r\n                      style={{\r\n                        width: \"76.5%\",\r\n                        margin: \"auto\",\r\n                        background: \"#a3ffb4\",\r\n                      }}\r\n                    >\r\n                      <tbody>\r\n                        <tr key={key}>\r\n                          <td>{student.username}</td>\r\n                          <td>{student.prn}</td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </>\r\n                )}\r\n\r\n                <div className=\"modal fade\" id=\"denyModal\" role=\"dialog\">\r\n                  <div className=\"modal-dialog modal-sm\">\r\n                    <div className=\"modal-content\">\r\n                      <div className=\"modal-header\">\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"close\"\r\n                          data-dismiss=\"modal\"\r\n                        >\r\n                          &times;\r\n                        </button>\r\n                        <h4 className=\"modal-title\">Modal Header</h4>\r\n                      </div>\r\n                      <div className=\"modal-body\">\r\n                        <p>This is a small modal.</p>\r\n                      </div>\r\n                      <div className=\"modal-footer\">\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-default\"\r\n                          data-dismiss=\"modal\"\r\n                        >\r\n                          Close\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default VerificationScreen;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./css/VerificationScreen.css\";\r\nimport ElectionInitializeMsg from \"../../components/ElectionInitializeMsg.js\";\r\nimport YourAccount from \"../../components/YourAccount.js\";\r\nimport {\r\n  sol_getAllVoterDetails,\r\n  sol_isAdminAddress,\r\n  sol_approveCandidateRequests,\r\n  sol_denyVerificationRequests,\r\n  sol_getElectionDetails,\r\n  sol_isPendingRequest,\r\n} from \"../../webaction/SolidityFunctionModules.js\";\r\n\r\nconst CandidateVerificationScreen = () => {\r\n  //------------------------------ useState Hooks -----------------------------------------//\r\n\r\n  const navigate = useNavigate();\r\n  const [candidateData, setCandidateData] = useState([]);\r\n  const [isApproved, setIsApproved] = useState(false);\r\n  const [currentElectionPhase, setCurrentElectionPhase] = useState(\"\");\r\n  const [atLeastOneCandidate, setAtLeastOneCandidate] = useState(false);\r\n  const [atLeastOnePending, setAtLeastOnePending] = useState(false);\r\n\r\n  //---------------------------------style----------------------------------------------//\r\n\r\n  const buttonStyle = {\r\n    width: \"40%\",\r\n    marginRight: \"10%\",\r\n  };\r\n\r\n  //------------------------------ Functions -----------------------------------------//\r\n  const onClickApprove = async (voterAddress) => {\r\n    const data = await sol_approveCandidateRequests(voterAddress);\r\n    setIsApproved(data);\r\n    isPendingRequest();\r\n  };\r\n\r\n  const onClickDeny = async (voterAddress) => {\r\n    const data = await sol_denyVerificationRequests(voterAddress);\r\n    setIsApproved(data);\r\n    isPendingRequest();\r\n  };\r\n\r\n  const getElectionDetails = async () => {\r\n    const data = await sol_getElectionDetails();\r\n    setCurrentElectionPhase(data[3]);\r\n  };\r\n\r\n  const routeValidation = async () => {\r\n    const data = await sol_isAdminAddress();\r\n    if (!data) {\r\n      navigate(\"/dashboard\");\r\n    }\r\n  };\r\n\r\n  const isPendingRequest = async () => {\r\n    const data = await sol_isPendingRequest();\r\n    if(!data)\r\n    {\r\n      setAtLeastOnePending(false);\r\n    }\r\n  }\r\n\r\n  const getAllVoterDetails = async () => {\r\n    const data = await sol_getAllVoterDetails();\r\n    let allCandidateDetails = [];\r\n    if (data) {\r\n      for (let i = 0; i < data.length; i++) {\r\n        let temp = {};\r\n\r\n        temp[\"voterAddress\"] = data[i][\"voterAddress\"];\r\n        temp[\"username\"] = data[i][\"username\"];\r\n        temp[\"tagLine\"] = data[i][\"voterElectionDetails\"][\"tagLine\"];\r\n        temp[\"hasApplied\"] = data[i][\"voterElectionDetails\"][\"hasApplied\"];\r\n        temp[\"isCandidate\"] = data[i][\"voterElectionDetails\"][\"isCandidate\"];\r\n        if (!atLeastOneCandidate && temp[\"isCandidate\"]) {\r\n          setAtLeastOneCandidate(true);\r\n        }\r\n\r\n        if (!atLeastOnePending && temp[\"hasApplied\"]) {\r\n          setAtLeastOnePending(true);\r\n        }\r\n\r\n        allCandidateDetails.push(temp);\r\n      }\r\n\r\n      console.log(allCandidateDetails);\r\n      setCandidateData([...allCandidateDetails]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getElectionDetails();\r\n    routeValidation();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsApproved(false);\r\n    getAllVoterDetails();\r\n  }, [isApproved]);\r\n\r\n  //------------------------------ Render Content -----------------------------------------//\r\n  return (\r\n    <>\r\n      <YourAccount />\r\n      <ElectionInitializeMsg />\r\n      {currentElectionPhase === \"Candidate Application\" && (\r\n        <div className=\"container\">\r\n          <div\r\n            className=\"alert alert-primary text-center fw-bold mt-3\"\r\n            role=\"alert\"\r\n          >\r\n            List of registered Candidates\r\n          </div>\r\n          <h3>Pending Approvals: </h3>\r\n          <table\r\n            className=\"table table-striped mt-5 \"\r\n            style={{ width: \"75%\", margin: \"auto\" }}\r\n          >\r\n            <tbody>\r\n                <tr>\r\n                  <th>Student's Name </th>\r\n                  <th>Tag Line </th>\r\n                  <th></th>\r\n                  <th></th>\r\n                </tr>\r\n              {!atLeastOnePending && (\r\n                <tr>\r\n                  <th colSpan={4} className=\"text-center\">No Pending Requests!</th>\r\n                </tr>\r\n              )}\r\n              {candidateData.map((student, key) => {\r\n                return (\r\n                  <>\r\n                    {student.hasApplied && (\r\n                      <tr key={key}>\r\n                        <td>{student.username}</td>\r\n                        <td>{student.tagLine}</td>\r\n                        <td colSpan={2}>\r\n                          <div className=\"\">\r\n                          <button\r\n                              className=\"btn btn-success text-light\"\r\n                              type=\"button\"\r\n                              style={buttonStyle}\r\n                              onClick={() => {\r\n                                onClickApprove(student.voterAddress);\r\n                              }}\r\n                            >\r\n                              Approve\r\n                            </button>\r\n\r\n                            <button\r\n                              className=\"btn btn-danger text-light\"\r\n                              type=\"button\"\r\n                              style={buttonStyle}\r\n                              onClick={() => {\r\n                                onClickDeny(student.voterAddress);\r\n                              }}\r\n                            >\r\n                              Deny\r\n                            </button>\r\n                            \r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    )}\r\n                  </>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n\r\n          <h3 className=\"mt-4\">Approved Candidates: </h3>\r\n          <table\r\n            className=\"table mt-4\"\r\n            style={{\r\n              width: \"75%\",\r\n              margin: \"auto\",\r\n              background: \" #aaf0d1\",\r\n            }}\r\n          >\r\n            <tbody>\r\n              \r\n                <tr>\r\n                  <th>Student's Name </th>\r\n                  <th>Tag Line </th>\r\n                </tr>\r\n                {!atLeastOneCandidate && (\r\n                  <tr>\r\n                  <th colSpan={4} className=\"text-center\">No Approved Candidates!</th>\r\n                  </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n          {candidateData.map((student, key) => {\r\n            return (\r\n              <div className=\"container\" key={key}>\r\n                {student.isCandidate && (\r\n                  <>\r\n                    <table\r\n                      className=\"table\"\r\n                      style={{\r\n                        width: \"76.5%\",\r\n                        margin: \"auto\",\r\n                        background: \" #aaf0d1\",\r\n                      }}\r\n                    >\r\n                      <tbody>\r\n                        <tr>\r\n                          <td>{student.username}</td>\r\n                          <td>{student.tagLine}</td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CandidateVerificationScreen;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ElectionInitializeMsg from \"../components/ElectionInitializeMsg.js\";\r\nimport YourAccount from \"../components/YourAccount.js\";\r\nimport {\r\n  sol_getAllVoterDetails,\r\n  sol_isAdminAddress,\r\n  sol_getUserDetails,\r\n  sol_hasVoted,\r\n  sol_addVote,\r\n  sol_getElectionDetails\r\n} from \"../webaction/SolidityFunctionModules.js\";\r\n\r\nconst VotingScreen = () => {\r\n  //------------------------------ useState Hooks -----------------------------------------//\r\n  const navigate = useNavigate();\r\n  const [isAdminConnected, setIsAdminConnected] = useState(false);\r\n  const [account, setAccount] = useState(null);\r\n  const [candidateData, setCandidateData] = useState([]);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [hasVoted, setHasVoted] = useState(false);\r\n  const [currentElectionPhase, setCurrentElectionPhase] = useState(\"\");\r\n\r\n  //------------------------------ style CSS -----------------------------------------//\r\n\r\n  const divisionstyle = {\r\n    width: \"50%\",\r\n    background: \"#C2DAF7\",\r\n    padding: \"2%\",\r\n    margin: \"3% auto\",\r\n  };\r\n\r\n  //------------------------------ Functions -----------------------------------------//\r\n\r\n  const routeValidation = async () => {\r\n    const data = await sol_isAdminAddress();\r\n    if (data) {\r\n      navigate(\"/dashboard\");\r\n    }\r\n    setIsAdminConnected(data);\r\n  };\r\n\r\n  const hasCastedVote = async () => {\r\n    setHasVoted(await sol_hasVoted());\r\n  };\r\n  const onClickVote = async (candidateAddress) => {\r\n    const vote = await sol_addVote(candidateAddress);\r\n    hasCastedVote();\r\n  };\r\n\r\n  const getUserDetails = async () => {\r\n    const data = await sol_getUserDetails();\r\n    if (!data) {\r\n      navigate(\"/login\");\r\n    }\r\n    setIsVerified(data[\"voterElectionDetails\"][\"isVerified\"]);\r\n  };\r\n\r\n  const getAllVoterDetails = async () => {\r\n    const data = await sol_getAllVoterDetails();\r\n    let allCandidateDetails = [];\r\n    if (data) {\r\n      for (let i = 0; i < data.length; i++) {\r\n        let temp = {};\r\n\r\n        temp[\"voterAddress\"] = data[i][\"voterAddress\"];\r\n        temp[\"username\"] = data[i][\"username\"];\r\n        temp[\"isCandidate\"] = data[i][\"voterElectionDetails\"][\"isCandidate\"];\r\n        temp[\"tagLine\"] = data[i][\"voterElectionDetails\"][\"tagLine\"];\r\n\r\n        if (temp[\"isCandidate\"]) {\r\n          allCandidateDetails.push(temp);\r\n        }\r\n      }\r\n\r\n      setCandidateData([...allCandidateDetails]);\r\n    }\r\n  };\r\n\r\n  const getElectionDetails = async () => {\r\n    const data = await sol_getElectionDetails();\r\n    setCurrentElectionPhase(data[3]);\r\n  };\r\n\r\n  // --------------ADDED BY BIJO-------------\r\n  useEffect(() => {\r\n    const getAccount = async () => {\r\n      if (window.ethereum) {\r\n        const accounts = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        setAccount(accounts[0]);\r\n      }\r\n    };\r\n    getAccount();\r\n  }, []);\r\n\r\n  // --------------ADDED BY BIJO-------------\r\n\r\n  useEffect(() => {\r\n    getUserDetails();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getElectionDetails();\r\n    routeValidation();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    hasCastedVote();\r\n    getAllVoterDetails();\r\n  }, [hasVoted]);\r\n\r\n  //------------------------------ Render Content -----------------------------------------//\r\n  return (\r\n    <>\r\n      <YourAccount />\r\n      <ElectionInitializeMsg />\r\n      {!isVerified && (\r\n        <div\r\n          className=\"text-center bg-danger text-light fw-bold fs-4\"\r\n          style={divisionstyle}\r\n        >\r\n          <div>You are not verified as a voter.</div>\r\n          <div>You can not cast vote.</div>\r\n        </div>\r\n      )}\r\n      {currentElectionPhase === \"Voting\" && isVerified && (\r\n        <>\r\n          <div\r\n            className=\"alert alert-success text-center fw-bold mt-2\"\r\n            role=\"alert\"\r\n          >\r\n            {!hasVoted ? (\r\n              <h5>Go ahead and cast your vote!</h5>\r\n            ) : (\r\n              <>\r\n                <h5>You have successfully voted. </h5>\r\n                <h5>Now wait for the results.</h5>\r\n                <h5> Thank you!</h5>\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          <h4>Total Candidates: {candidateData.length}</h4>\r\n\r\n          {candidateData.map((candidate, key) => {\r\n            return (\r\n              <div className=\"container bg-light p-4 mt-4\" key={key}>\r\n                {candidate.isCandidate && (\r\n                  <>\r\n                    <div className=\"row align-items-center\">\r\n                      <div className=\"col-9 \">\r\n                        <h5>Candidate</h5>\r\n                        <div>\r\n                          <h5>Name: {candidate.username}</h5>\r\n                          <hr />\r\n                          <p>{candidate.tagLine}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-3\">\r\n                        <div className=\"d-grid gap-2 col-6 mx-auto\">\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-lg btn-success\"\r\n                            disabled={hasVoted ? true : false}\r\n                            onClick={() => onClickVote(candidate.voterAddress)}\r\n                          >\r\n                            Vote\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default VotingScreen;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { sol_getAllVoterDetails } from \"../webaction/SolidityFunctionModules.js\";\r\n\r\nconst Analysis = () => {\r\n  const [P1_candidateName, setP1_CandidateName] = useState([]);\r\n  const [P1_candidateVotesCount, setP1_candidateVotesCount] = useState([]);\r\n  const [P2_totalCount, setP2_TotalCount] = useState(0);\r\n  const [P2_verifiedCount, setP2_VerifiedCount] = useState(0);\r\n  const [P2_candidateCount, setP2_CandidateCount] = useState(0);\r\n  const [P2_votedCount, setP2_VotedCount] = useState(0);\r\n  const [P2_notVotedVerifiedCount, setP2_NotVotedVerifiedCount] = useState(0);\r\n  const [P2_notVotedNotVerifiedCount, setP2_NotVotedNotVerifiedCount] =\r\n    useState(-1);\r\n\r\n  const getAllVoterDetails = async () => {\r\n    const data = await sol_getAllVoterDetails();\r\n    if (data) {\r\n      setP2_TotalCount(data.length - 1);\r\n      for (let i = 0; i < data.length; i++) {\r\n        let temp = {};\r\n\r\n        temp[\"username\"] = data[i][\"username\"];\r\n        temp[\"isCandidate\"] = data[i][\"voterElectionDetails\"][\"isCandidate\"];\r\n        temp[\"isVerified\"] = data[i][\"voterElectionDetails\"][\"isVerified\"];\r\n        temp[\"votesCount\"] = data[i][\"voterElectionDetails\"][\"votesCount\"];\r\n        temp[\"hasVoted\"] = data[i][\"voterElectionDetails\"][\"hasVoted\"];\r\n\r\n        if (temp[\"isCandidate\"]) {\r\n          setP2_CandidateCount((P2_candidateCount) => P2_candidateCount + 1);\r\n          P1_candidateName.push(temp[\"username\"]);\r\n          P1_candidateVotesCount.push(temp[\"votesCount\"]);\r\n        }\r\n        if (temp[\"isVerified\"]) {\r\n          setP2_VerifiedCount((P2_verifiedCount) => P2_verifiedCount + 1);\r\n        }\r\n        if (temp[\"hasVoted\"]) {\r\n          setP2_VotedCount((P2_votedCount) => P2_votedCount + 1);\r\n        }\r\n        if (!temp[\"isVerified\"]) {\r\n          setP2_NotVotedNotVerifiedCount(\r\n            (P2_notVotedNotVerifiedCount) => P2_notVotedNotVerifiedCount + 1\r\n          );\r\n        }\r\n        if (temp[\"isVerified\"] && !temp[\"hasVoted\"]) {\r\n          setP2_NotVotedVerifiedCount(\r\n            (P2_notVotedVerifiedCount) => P2_notVotedVerifiedCount + 1\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllVoterDetails();\r\n  }, []);\r\n\r\n  var P1_data = [\r\n    {\r\n      values: P1_candidateVotesCount,\r\n      labels: P1_candidateName,\r\n      type: \"pie\",\r\n      textinfo: \"label+value\",\r\n    },\r\n  ];\r\n\r\n  var P2_data = [\r\n    {\r\n      type: \"sunburst\",\r\n      labels: [\r\n        \"Total\",\r\n        \"Verified\",\r\n        \"Not Verified\",\r\n        \"Voted\",\r\n        \"Not Voted\",\r\n        \"Not voted\",\r\n      ],\r\n      parents: [\"\", \"Total\", \"Total\", \"Verified\", \"Verified\", \"Not Verified\"],\r\n      values: [\r\n        P2_totalCount,\r\n        P2_verifiedCount,\r\n        P2_totalCount - P2_verifiedCount,\r\n        P2_votedCount,\r\n        P2_notVotedVerifiedCount,\r\n        P2_notVotedNotVerifiedCount,\r\n      ],\r\n      outsidetextfont: { size: 20, color: \"#377eb8\" },\r\n      leaf: { opacity: 0.4 },\r\n      marker: { line: { width: 2 } },\r\n      branchvalues: \"total\",\r\n      textinfo: \"label+value\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"mt-3 p-2\">\r\n      <Plot\r\n        data={P1_data}\r\n        layout={{\r\n          width: 400,\r\n          height: 500,\r\n          title: \"Number of votes per Candidate\",\r\n          margin: { l: 0, r: 0, b: 0, t: 50 },\r\n        }}\r\n      />\r\n      <Plot\r\n        data={P2_data}\r\n        layout={{\r\n          margin: { l: 0, r: 0, b: 0, t: 50 },\r\n          width: 500,\r\n          height: 500,\r\n          title: \"Student's participation in the Election\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Analysis;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ElectionInitializeMsg from \"../components/ElectionInitializeMsg.js\";\r\nimport YourAccount from \"../components/YourAccount.js\";\r\nimport Analysis from \"../components/Analysis.js\";\r\nimport { sol_getAllVoterDetails, sol_getElectionDetails } from \"../webaction/SolidityFunctionModules.js\";\r\n\r\nconst ResultScreen = () => {\r\n  const resultscreenstyle = {\r\n    backgroundImage: `url(\"./Images/confetti-17.gif\")`,\r\n    height: \"90vh\",\r\n    width: \"100vw\",\r\n  };\r\n  //------------------------------ style CSS -----------------------------------------//\r\n  const tablestyle = {\r\n    width: \"60%\",\r\n    margin: \"auto\",\r\n    marginleft: \"0\",\r\n    padding: \"1em\",\r\n    border: \"1px solid #000000 !important\",\r\n    background: \"#C2DAF7\",\r\n  };\r\n\r\n  const winnerBoxStyle = {\r\n    width: \"60%\",\r\n    margin: \"auto\",\r\n    padding: \"1em\",\r\n  };\r\n\r\n  const analysisStyle = {\r\n    width: \"100%\",\r\n    marginLeft: \"10%\",\r\n  };\r\n  //------------------------------ useState hooks -----------------------------------------//\r\n\r\n  const [candidateData, setCandidateData] = useState([]);\r\n  const [winnerCandidate, setWinnerCandidate] = useState({});\r\n  const [currentElectionPhase, setCurrentElectionPhase] = useState(\"\");\r\n\r\n  /*----------------- WARNING ---------------*/\r\n  /*  Check function for Continous Looping   */\r\n  /*-----------------------------------------*/\r\n\r\n  const getAllVoterDetails = async () => {\r\n    let maxVotes = 0;\r\n    let winner = {};\r\n    const data = await sol_getAllVoterDetails();\r\n    let allCandidateDetails = [];\r\n    if (data) {\r\n      for (let i = 0; i < data.length; i++) {\r\n        let temp = {};\r\n\r\n        temp[\"username\"] = data[i][\"username\"];\r\n        temp[\"isCandidate\"] = data[i][\"voterElectionDetails\"][\"isCandidate\"];\r\n        temp[\"votesCount\"] = data[i][\"voterElectionDetails\"][\"votesCount\"];\r\n\r\n        if (temp[\"votesCount\"] > maxVotes) {\r\n          maxVotes = data[i][\"voterElectionDetails\"][\"votesCount\"];\r\n          winner[\"winnerName\"] = data[i][\"username\"];\r\n          winner[\"maxVotes\"] = data[i][\"voterElectionDetails\"][\"votesCount\"];\r\n          setWinnerCandidate(winner);\r\n        }\r\n\r\n        if (temp[\"isCandidate\"]) {\r\n          allCandidateDetails.push(temp);\r\n        }\r\n      }\r\n      setCandidateData([...allCandidateDetails]);\r\n    }\r\n  };\r\n\r\n  const getElectionDetails = async () => {\r\n    const data = await sol_getElectionDetails();\r\n    setCurrentElectionPhase(data[3]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getElectionDetails();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getAllVoterDetails();\r\n  }, []);\r\n\r\n\r\n  //------------------------------ Render Content -----------------------------------------//\r\n  return (\r\n    <>\r\n      <YourAccount />\r\n      <ElectionInitializeMsg />\r\n      {currentElectionPhase === \"Result\" && (\r\n        <div className=\"container\" style={resultscreenstyle}>\r\n          <h2>Results</h2>\r\n          <h3 className=\"bg-light\" style={{ display: \"inline-block\" }}>\r\n            Total Candidates: {candidateData.length}\r\n          </h3>\r\n          <div\r\n            className=\"row align-items-center bg-info text-light mt-4\"\r\n            style={winnerBoxStyle}\r\n          >\r\n            <div className=\"col-6\">\r\n              <h5 className=\"fs-1\">Winner</h5>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              {/* <h5 className=\"fs-1\">\r\n              <img src=\"./Images/winner.png\" height=\"40\" width=\"40\"></img>\r\n              {winnerCandidate.winnerName}\r\n            </h5> */}\r\n\r\n              <h5 className=\"fs-1\">\r\n                <img\r\n                  src=\"./Images/winner.png\"\r\n                  height=\"40\"\r\n                  width=\"40\"\r\n                  alt=\"Winner Icon\"\r\n                />\r\n                {winnerCandidate.winnerName}\r\n              </h5>\r\n            </div>\r\n          </div>\r\n          <div className=\"container-list \">\r\n            <table className=\"table mt-5 \" style={tablestyle}>\r\n              <tbody>\r\n                <tr>\r\n                  <th>ID</th>\r\n                  <th>Candidate</th>\r\n                  <th> Votes</th>\r\n                </tr>\r\n                {candidateData.map((student, key) => {\r\n                  return (\r\n                    <tr key={key}>\r\n                      <td>{key + 1}</td>\r\n                      <td>{student.username}</td>\r\n                      <td>{student.votesCount}</td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div>\r\n            <h1 className=\"mt-4\">Analysis</h1>\r\n            <div style={analysisStyle}>\r\n              <Analysis />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResultScreen;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    position: \"fixed\",\r\n    left: 0,\r\n    bottom: 0,\r\n    width: \"100%\",\r\n  };\r\n\r\n  return (\r\n    <footer className=\"footer bg-primary text-light p-3\" style={footerStyle}>\r\n      <div className=\"container\">&copy; Voting System using Blockchain</div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Navbar from \"../components/Navbar.js\";\r\nimport AlertMessage from \"../components/AlertMessage.js\";\r\nimport {\r\n  sol_verifyLoginDetails,\r\n  sol_connectwallet,\r\n  sol_isAdminAddress,\r\n  sol_isVoterExists,\r\n} from \"../webaction/SolidityFunctionModules\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst AdminLoginScreen = () => {\r\n  //------------------------------ Style CSS -----------------------------------------//\r\n  const AdminLoginscreenstyle = {\r\n    minHeight: \"100%\",\r\n    backgroundImage: `url(\"./Images/wallpaper2.png\")`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundPosition: \"center center\",\r\n    backgroundSize: \"cover\",\r\n    width: \"100vw\",\r\n    // height: \"84vh\",\r\n    // ---------------------------We added------------------------------------\r\n    display: \"flex\",\r\n    justifyContent: \"center\", // horizontal center\r\n    alignItems: \"center\", // vertical center\r\n    height: \"100vh\", // take full screen height\r\n    backgroundColor: \"#0f172a\", // optional: dark blue background\r\n    // ---------------------------We added------------------------------------\r\n  };\r\n\r\n  const Adminloginformstyle = {\r\n    width: \"25%\",\r\n    minWidth: \"400px\",\r\n    background: \"#23263F\",\r\n    padding: \"8%\",\r\n    float: \"left\",\r\n    margin: \"3%\",\r\n    borderRadius: \"20px\",\r\n  };\r\n\r\n  const metmamaskBtnStyle = {\r\n    color: \"#000000\",\r\n    fontSize: \"1.5em\",\r\n  };\r\n\r\n  const registerlinkstyle = {\r\n    textDecoration: \"none\",\r\n  };\r\n\r\n  //------------------------------ useStates Hooks -----------------------------------------//\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isAccountConnected, setIsAccountConnected] = useState(false);\r\n  const [errorLogin, setErrorLogin] = useState(null);\r\n  const [currentAcc, setCurrentAcc] = useState(\"\");\r\n  const [errorConnectWallet, setErrorConnectWallet] = useState(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  //------------------------------ Functions -----------------------------------------//\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (await sol_isAdminAddress()) {\r\n      if (await sol_isVoterExists(email)) {\r\n        let result = await sol_verifyLoginDetails(email, password);\r\n        if (result) navigate(\"/dashboard\");\r\n        else setErrorLogin(\"Wrong credentails!\");\r\n        // navigate to login\r\n      }\r\n      else setErrorLogin(\"Account does NOT exist. Register first.\")\r\n    } else setErrorLogin(\" Only Admin can Login.\");\r\n  };\r\n  \r\n  const onWalletConnection = async () => {\r\n    let data = await sol_connectwallet();\r\n    if (data.error) {\r\n      setErrorConnectWallet(data.error);\r\n    } else {\r\n      setCurrentAcc(data.acc[0]);\r\n      setIsAccountConnected(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {}, [errorConnectWallet, errorLogin]);\r\n\r\n  //------------------------------ Render Content -----------------------------------------//\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"AdminLoginPageWallpaper\" style={AdminLoginscreenstyle}>\r\n        <form onSubmit={submitHandler}>\r\n          <div className=\"container text-light\" style={Adminloginformstyle}>\r\n            <div className=\"text-center\">\r\n              <h3>Admin</h3>\r\n\r\n              {errorConnectWallet && (\r\n                <AlertMessage type=\"danger\" message={errorConnectWallet} />\r\n              )}\r\n              {errorLogin && (\r\n                <AlertMessage type=\"danger\" message={errorLogin} />\r\n              )}\r\n            </div>\r\n            <div>\r\n              <p>\r\n                Don't have an account?\r\n                <Link style={registerlinkstyle} to=\"/register\">\r\n                  {\" \"}\r\n                  Register Here\r\n                </Link>\r\n              </p>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"Email\" className=\"form-label\">\r\n                Email\r\n              </label>\r\n              <input\r\n                type=\"email\"\r\n                pattern=\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\r\n                className=\"form-control\"\r\n                id=\"AdminEmail\"\r\n                placeholder=\"e.g. xyz@gmail.com\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                required\r\n              ></input>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"AdminPassword\" className=\"form-label\">\r\n                Password\r\n              </label>\r\n              <input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                id=\"AdminPassword\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n              ></input>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <div className=\"d-grid gap-2\">\r\n                <label htmlFor=\"metamaskbtn\" className=\"form-label\">\r\n                  Metamask Wallet{\" \"}\r\n                  {isAccountConnected ? (\r\n                    <i\r\n                      style={{ color: \"green\" }}\r\n                      className=\"fa-solid fa-circle-check\"\r\n                    ></i>\r\n                  ) : (\r\n                    <i\r\n                      style={{ color: \"red\" }}\r\n                      className=\"fa-solid fa-circle-xmark\"\r\n                    ></i>\r\n                  )}\r\n                </label>\r\n                <button\r\n                  className={`btn ${\r\n                    isAccountConnected ? \"btn-success\" : \"btn-danger\"\r\n                  }  btn-lg fw-bold`}\r\n                  type=\"button\"\r\n                  id=\"metamaskbtn\"\r\n                  onClick={onWalletConnection}\r\n                  style={metmamaskBtnStyle}\r\n                >\r\n                  <img\r\n                    src=\"./Images/metamask.png\"\r\n                    alt=\"\"\r\n                    width=\"80\"\r\n                    height=\"40\"\r\n                  />\r\n                  METAMASK\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-warning btn-lg mt-4\"\r\n                  type=\"submit\"\r\n                  disabled={!isAccountConnected}\r\n                >\r\n                  Login\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdminLoginScreen;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport HomeScreen from \"./screens/HomeScreen.js\";\r\nimport AboutUs from \"./screens/AboutUsScreen.js\";\r\nimport RegisterScreen from \"./screens/RegisterScreen.js\";\r\nimport LoginScreen from \"./screens/LoginScreen.js\";\r\nimport DashboardScreen from \"./screens/DashboardScreen.js\";\r\nimport InformationScreen from \"./screens/InformationScreen.js\";\r\nimport VoterVerificationScreen from \"./screens/VoterVerificationScreen.js\";\r\nimport ElectionSetupScreen from \"./screens/admin/ElectionSetupScreen.js\";\r\nimport VerificationScreen from \"./screens/admin/VerificationScreen.js\";\r\nimport CandidateVerificationScreen from \"./screens/admin/CandidateVerificationScreen.js\";\r\nimport VotingScreen from \"./screens/VotingScreen.js\";\r\nimport ResultScreen from \"./screens/ResultScreen.js\";\r\nimport Footer from \"./components/Footer.js\";\r\nimport \"./App.css\";\r\nimport AdminLoginScreen from \"./screens/AdminLoginScreen.js\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <main>\r\n          <div>\r\n            <Routes>\r\n              <Route exact path=\"/\" element={<HomeScreen />} />\r\n              {/* <Route exact path=\"/aboutus\" element={<AboutUs />} /> */}\r\n              <Route exact path=\"/register\" element={<RegisterScreen />} />\r\n              <Route exact path=\"/adminlogin\" element={<AdminLoginScreen />} />\r\n              <Route exact path=\"/login\" element={<LoginScreen />} />\r\n              <Route\r\n                exact\r\n                path=\"/dashboard\"\r\n                element={<DashboardScreen component={<InformationScreen />} />}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/information\"\r\n                element={<DashboardScreen component={<InformationScreen />} />}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/voterverification\"\r\n                element={\r\n                  <DashboardScreen component={<VoterVerificationScreen />} />\r\n                }\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/voting\"\r\n                element={<DashboardScreen component={<VotingScreen />} />}\r\n              />\r\n\r\n              <Route\r\n                exact\r\n                path=\"/electionsetup\"\r\n                element={\r\n                  <DashboardScreen component={<ElectionSetupScreen />} />\r\n                }\r\n              />\r\n\r\n              <Route\r\n                exact\r\n                path=\"/verification\"\r\n                element={<DashboardScreen component={<VerificationScreen />} />}\r\n              />\r\n\r\n              <Route\r\n                exact\r\n                path=\"/candidateverification\"\r\n                element={\r\n                  <DashboardScreen\r\n                    component={<CandidateVerificationScreen />}\r\n                  />\r\n                }\r\n              />\r\n\r\n              <Route\r\n                exact\r\n                path=\"/result\"\r\n                element={<DashboardScreen component={<ResultScreen />} />}\r\n              />\r\n            </Routes>\r\n          </div>\r\n        </main>\r\n        <Footer />\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}